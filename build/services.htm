<style>
		table {
			border-collapse: collapse;
		}
		td {
			border: 1px solid black;
			padding: 2px 5px;
		}
	</style><hr/><h1>Class: block_exacomp_external</h1><hr/>
<h2>block_exacomp_get_courses</h2>
<div>Get courses with exacomp block instances.
get courses</div>
<div>type: read</div>
Params: <table>
<tr>
<td>userid</td>
<td>int</td>
<td>null</td>
<td>optional</td>
<td>default: NULL
</td>
<td>id of user</td>
<td></td>
</table>
Returns:<pre>[
    {
        "courseid": "int null ('id of course')",
        "fullname": "text null ('fullname of course')",
        "shortname": "raw null ('shortname of course')",
        "exarole": "int null ('1=trainer, 2=student')",
        "teachercanedit": "bool null",
        "assessment_config": "raw null ('which course specific assessment_config is used')"
    },
    "..."
]</pre>
<h2>block_exacomp_get_examples_for_subject</h2>
<div>Get examples for subtopic
Get examples</div>
<div>type: read</div>
Params: <table>
<tr>
<td>subjectid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of subject</td>
<td></td>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of course</td>
<td></td>
<tr>
<td>userid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of user</td>
<td></td>
</table>
Returns:<pre>[
    {
        "topicid": "int null ('id of topic')",
        "title": "text null ('title of topic')",
        "requireaction": "bool null ('trainer action required or not')",
        "examples": [
            {
                "exampleid": "int null ('id of example')",
                "example_title": "text null ('title of example')",
                "example_item": "int null ('current item id')",
                "example_status": "int null ('status of current item')",
                "example_creatorid": "int null ('creator of example')"
            },
            "..."
        ],
        "quizes": [
            {
                "quizid": "int null ('id of quiz')",
                "quiz_title": "text null ('title of quiz')",
                "quiz_grade": "float null ('sum grade of quiz')"
            },
            "... quiz data ..."
        ]
    },
    "..."
]</pre>
<h2>block_exacomp_get_examples_for_subject_with_lfs_infos</h2>
<div>Get examples for subtopic
Get examples</div>
<div>type: read</div>
Params: <table>
<tr>
<td>subjectid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of subject</td>
<td></td>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of course</td>
<td></td>
<tr>
<td>userid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of user</td>
<td></td>
</table>
Returns:<pre>[
    {
        "topicid": "int null ('id of topic')",
        "title": "text null ('title of topic')",
        "requireaction": "bool null ('trainer action required or not')",
        "totalCompetencies": "int null ('amount of total competencies of this topic')",
        "examples": [
            {
                "exampleid": "int null ('id of example')",
                "numbering": "text null ('descriptor numbering')",
                "example_title": "text null ('title of example')",
                "example_item": "int null ('current item id')",
                "example_status": "int null ('status of current item')",
                "example_creatorid": "int null ('creator of example')"
            },
            "..."
        ],
        "quizes": [
            {
                "quizid": "int null ('id of quiz')",
                "quiz_title": "text null ('title of quiz')",
                "quiz_grade": "float null ('sum grade of quiz')"
            },
            "... quiz data ..."
        ]
    },
    "..."
]</pre>
<h2>block_exacomp_get_example_by_id</h2>
<div>Get example
Get example</div>
<div>type: read</div>
Params: <table>
<tr>
<td>exampleid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of example</td>
<td></td>
</table>
Returns:<pre>{
    "title": "text null ('title of example')",
    "description": "text null ('description of example')",
    "taskfileurl": "text null ('task fileurl')",
    "taskfilenames": "text null ('task filename')",
    "externalurl": "text null ('externalurl of example')",
    "task": "text null ('@deprecated')",
    "solution": "text null ('solution(url\/description) of example')",
    "timeframe": "text null ('timeframe as string')",
    "hassubmissions": "bool null ('true if example has already submissions')",
    "quiz": {
        "quizid": "int null ('id of quiz')",
        "quiz_title": "text null ('title of quiz')",
        "quiz_grade": "float null ('sum grade of quiz')"
    }
}</pre>
<h2>block_exacomp_get_descriptors_for_example</h2>
<div>Get desciptors for example
Get descriptors for example</div>
<div>type: read</div>
Params: <table>
<tr>
<td>exampleid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of example</td>
<td></td>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of course</td>
<td></td>
<tr>
<td>userid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of user</td>
<td></td>
</table>
Returns:<pre>[
    {
        "descriptorid": "int null ('id of descriptor')",
        "title": "text null ('title of descriptor')",
        "evaluation": "int null ('evaluation of descriptor')"
    },
    "..."
]</pre>
<h2>block_exacomp_get_descriptors_for_quiz</h2>
<div>Get desciptors for quiz
Get descriptors for quiz</div>
<div>type: read</div>
Params: <table>
<tr>
<td>quizid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of quiz</td>
<td></td>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of course</td>
<td></td>
<tr>
<td>userid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of user</td>
<td></td>
</table>
Returns:<pre>[
    {
        "descriptorid": "int null ('id of descriptor')",
        "title": "text null ('title of descriptor')",
        "evaluation": "int null ('evaluation of descriptor')"
    },
    "..."
]</pre>
<h2>block_exacomp_get_user_role</h2>
<div>Get role for user: 1=trainer 2=student</div>
<div>type: read</div>
Params: <table>
</table>
Returns:<pre>{
    "role": "int null ('1=trainer, 2=student')",
    "diwipassapp_login": "int null ('0=first, 1=not first')"
}</pre>
<h2>block_exacomp_diggr_get_user_role</h2>
<div>Get role for user: 1=trainer 2=student</div>
<div>type: read</div>
Params: <table>
</table>
Returns:<pre>{
    "role": "int null ('1=trainer, 2=student')",
    "diwipassapp_login": "int null ('0=first, 1=not first')"
}</pre>
<h2>block_exacomp_get_external_trainer_students</h2>
<div>Get external trainer's students
Get all students for an external trainer</div>
<div>type: read</div>
Params: <table>
</table>
Returns:<pre>[
    {
        "userid": "int null ('id of user')",
        "name": "text null ('name of user')",
        "cohorts": [
            {
                "cohortid": "int null ('id of cohort')",
                "name": "text null ('title of cohort')"
            },
            "..."
        ],
        "requireaction": "bool null ('trainer action required or not')",
        "examples": {
            "total": "int null",
            "submitted": "int null",
            "reached": "int null"
        }
    },
    "..."
]</pre>
<h2>block_exacomp_get_subjects_for_user</h2>
<div>Get Subjects
get subjects from one user for all his courses</div>
<div>type: read</div>
Params: <table>
<tr>
<td>userid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of user</td>
<td></td>
</table>
Returns:<pre>[
    {
        "subjectid": "int null ('id of subject')",
        "title": "text null ('title of subject')",
        "courseid": "int null ('id of course')",
        "requireaction": "bool null ('whether example in this subject has been edited or not by the selected student')"
    },
    "..."
]</pre>
<h2>diggrplus_get_subjects_and_topics_for_user</h2>
<div>Get Subjects
get subjects from one user for all his courses</div>
<div>type: read</div>
Params: <table>
<tr>
<td>userid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of user</td>
<td></td>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>optional</td>
<td>default: int(-1)
</td>
<td>id of course. This is used for teachers.</td>
<td></td>
</table>
Returns:<pre>[
    {
        "id": "int null ('id of subject')",
        "title": "text null ('title of subject')",
        "courseid": "int null ('id of course')",
        "courseshortname": "text null ('courseshortname')",
        "coursefullname": "text null ('coursefullname')",
        "topics": [
            {
                "id": "int null ('id of example')",
                "title": "text null ('title of example')",
                "descriptors": [
                    {
                        "descriptorid": "int null ('id of example')",
                        "descriptortitle": "text null ('title of example')"
                    },
                    "..."
                ]
            },
            "..."
        ]
    },
    "..."
]</pre>
<h2>diggrplus_get_niveaus_for_subject</h2>
<div>Get Subjects
get subjects from one user for all his courses</div>
<div>type: read</div>
Params: <table>
<tr>
<td>subjectid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of subject</td>
<td></td>
</table>
Returns:<pre>[
    {
        "niveauid": "int null ('id of subject')",
        "niveautitle": "text null ('title of subject')"
    },
    "..."
]</pre>
<h2>block_exacomp_delete_item</h2>
<div>delete a submitted and wrong item
Deletes one user item if it is not graded already</div>
<div>type: write</div>
Params: <table>
<tr>
<td>itemid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of item</td>
<td></td>
</table>
Returns:<pre>{
    "success": "bool null ('status')"
}</pre>
<h2>block_exacomp_set_competence</h2>
<div>Set a student evaluation for a particular competence
Set student evaluation</div>
<div>type: write</div>
Params: <table>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of course</td>
<td></td>
<tr>
<td>descriptorid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of descriptor</td>
<td></td>
<tr>
<td>value</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>evaluation value</td>
<td></td>
</table>
Returns:<pre>{
    "success": "bool null ('status of success, either true (1) or false (0)')"
}</pre>
<h2>block_exacomp_get_item_for_example</h2>
<div>Get Item
get subjects from one user for all his courses</div>
<div>type: read</div>
Params: <table>
<tr>
<td>userid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of user</td>
<td></td>
<tr>
<td>itemid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of item</td>
<td></td>
</table>
Returns:<pre>{
    "id": "int null ('id of item')",
    "name": "text null ('title of item')",
    "type": "text null ('type of item (note,file,link)')",
    "url": "text null ('url')",
    "effort": "raw null ('description of the effort')",
    "filename": "text null ('title of item')",
    "file": "url null ('file url')",
    "isimage": "bool null ('true if file is image')",
    "status": "int null ('status of the submission')",
    "teachervalue": "int null ('teacher grading')",
    "studentvalue": "int null ('student grading')",
    "teachercomment": "text null ('teacher comment')",
    "studentcomment": "text null ('student comment')"
}</pre>
<h2>block_exacomp_get_competencies_for_upload</h2>
<div>Get competencetree
Get all available competencies</div>
<div>type: read</div>
Params: <table>
<tr>
<td>userid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of user</td>
<td></td>
</table>
Returns:<pre>[
    {
        "subjectid": "int null ('id of topic')",
        "subjecttitle": "text null ('title of topic')",
        "topics": [
            {
                "topicid": "int null ('id of example')",
                "topictitle": "text null ('title of example')",
                "descriptors": [
                    {
                        "descriptorid": "int null ('id of example')",
                        "descriptortitle": "text null ('title of example')"
                    },
                    "..."
                ]
            },
            "..."
        ]
    },
    "..."
]</pre>
<h2>block_exacomp_submit_example</h2>
<div>Submit example
submit example for elove and diggr
Add item</div>
<div>type: read</div>
Params: <table>
<tr>
<td>exampleid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>exampleid</td>
<td></td>
<tr>
<td>studentvalue</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>studentvalue</td>
<td></td>
<tr>
<td>url</td>
<td>url</td>
<td>null</td>
<td>required</td>
<td></td>
<td>url</td>
<td></td>
<tr>
<td>effort</td>
<td>text</td>
<td>null</td>
<td>required</td>
<td></td>
<td>effort</td>
<td></td>
<tr>
<td>filename</td>
<td>text</td>
<td>null</td>
<td>required</td>
<td></td>
<td>filename, used to look up file and create a new one in the exaport file area</td>
<td></td>
<tr>
<td>fileitemid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>fileitemid, used to look up file and create a new one in the exaport file area</td>
<td></td>
<tr>
<td>studentcomment</td>
<td>text</td>
<td>null</td>
<td>required</td>
<td></td>
<td>studentcomment</td>
<td></td>
<tr>
<td>title</td>
<td>text</td>
<td>null</td>
<td>required</td>
<td></td>
<td>title</td>
<td></td>
<tr>
<td>itemid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>itemid</td>
<td></td>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>courseid</td>
<td></td>
</table>
Returns:<pre>{
    "success": "bool null ('status')",
    "itemid": "int null ('itemid')"
}</pre>
<h2>block_exacomp_create_or_update_example</h2>
<div>Create an example or update it
create example</div>
<div>type: write</div>
Params: <table>
<tr>
<td>exampleid</td>
<td>int</td>
<td>null</td>
<td>optional</td>
<td>default: int(-1)
</td>
<td>id of the example that is to be updated</td>
<td></td>
<tr>
<td>name</td>
<td>text</td>
<td>null</td>
<td>required</td>
<td></td>
<td>title of example</td>
<td></td>
<tr>
<td>description</td>
<td>text</td>
<td>null</td>
<td>required</td>
<td></td>
<td>description of example</td>
<td></td>
<tr>
<td>timeframe</td>
<td>text</td>
<td>null</td>
<td>optional</td>
<td>default: string(0) ""
</td>
<td>description of example</td>
<td></td>
<tr>
<td>externalurl</td>
<td>text</td>
<td>null</td>
<td>optional</td>
<td>default: string(4) "wwww"
</td>
<td></td>
<td></td>
<tr>
<td>comps</td>
<td>text</td>
<td>null</td>
<td>optional</td>
<td>default: string(1) "0"
</td>
<td>list of competencies, seperated by comma, or "freemat" if freematerial should be created</td>
<td></td>
<tr>
<td>fileitemids</td>
<td>text</td>
<td>null</td>
<td>optional</td>
<td>default: string(0) ""
</td>
<td>fileitemids separated by comma</td>
<td></td>
<tr>
<td>solutionfileitemid</td>
<td>text</td>
<td>null</td>
<td>optional</td>
<td>default: string(0) ""
</td>
<td>fileitemid</td>
<td></td>
<tr>
<td>taxonomies</td>
<td>text</td>
<td>null</td>
<td>optional</td>
<td>default: string(0) ""
</td>
<td>list of taxonomies</td>
<td></td>
<tr>
<td>newtaxonomy</td>
<td>text</td>
<td>null</td>
<td>optional</td>
<td>default: string(0) ""
</td>
<td>new taxonomy to be created</td>
<td></td>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>optional</td>
<td>default: int(0)
</td>
<td>courseid</td>
<td></td>
<tr>
<td>filename</td>
<td>text</td>
<td>null</td>
<td>optional</td>
<td>default: string(0) ""
</td>
<td>deprecated (old code for maybe elove?) filename, used to look up file and create a new one in the exaport file area</td>
<td></td>
<tr>
<td>crosssubjectid</td>
<td>int</td>
<td>null</td>
<td>optional</td>
<td>default: int(-1)
</td>
<td>id of the crosssubject if it is a crosssubjectfile</td>
<td></td>
<tr>
<td>activityid</td>
<td>int</td>
<td>null</td>
<td>optional</td>
<td>default: int(0)
</td>
<td>id of related activity</td>
<td></td>
<tr>
<td>is_teacherexample</td>
<td>int</td>
<td>null</td>
<td>optional</td>
<td>default: int(0)
</td>
<td>is a teacher example?</td>
<td></td>
</table>
Returns:<pre>{
    "exampleid": "int null ('id of created example')",
    "newtaxonomy": {
        "id": "int null ('amount of total competencies')",
        "source": "text null ('amount of reached competencies')",
        "title": "text null ('amount of reached competencies')"
    }
}</pre>
<h2>diggrplus_create_or_update_example</h2>
<div>Create an example or update it
create example</div>
<div>type: write</div>
Params: <table>
<tr>
<td>exampleid</td>
<td>int</td>
<td>null</td>
<td>optional</td>
<td>default: int(-1)
</td>
<td>id of the example that is to be updated</td>
<td></td>
<tr>
<td>name</td>
<td>text</td>
<td>null</td>
<td>optional</td>
<td>default: string(0) ""
</td>
<td>title of example</td>
<td></td>
<tr>
<td>description</td>
<td>text</td>
<td>null</td>
<td>optional</td>
<td>default: string(0) ""
</td>
<td>description of example</td>
<td></td>
<tr>
<td>timeframe</td>
<td>text</td>
<td>null</td>
<td>optional</td>
<td>default: string(0) ""
</td>
<td>description of example</td>
<td></td>
<tr>
<td>externalurl</td>
<td>text</td>
<td>null</td>
<td>optional</td>
<td>default: string(4) "wwww"
</td>
<td></td>
<td></td>
<tr>
<td>comps</td>
<td>text</td>
<td>null</td>
<td>optional</td>
<td>default: string(1) "0"
</td>
<td>list of descriptorids, seperated by comma, or "freemat" if freematerial should be created</td>
<td></td>
<tr>
<td>taxonomies</td>
<td>text</td>
<td>null</td>
<td>optional</td>
<td>default: string(0) ""
</td>
<td>list of taxonomies</td>
<td></td>
<tr>
<td>newtaxonomy</td>
<td>text</td>
<td>null</td>
<td>optional</td>
<td>default: string(0) ""
</td>
<td>new taxonomy to be created</td>
<td></td>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>optional</td>
<td>default: int(0)
</td>
<td>courseid</td>
<td></td>
<tr>
<td>crosssubjectid</td>
<td>int</td>
<td>null</td>
<td>optional</td>
<td>default: int(-1)
</td>
<td>id of the crosssubject if it is a crosssubjectfile</td>
<td></td>
<tr>
<td>fileitemids</td>
<td>text</td>
<td>null</td>
<td>optional</td>
<td>default: string(0) ""
</td>
<td>fileitemids separated by comma, used to look up file and create a new one in the exaport file area</td>
<td></td>
<tr>
<td>removefiles</td>
<td>text</td>
<td>null</td>
<td>optional</td>
<td>default: string(0) ""
</td>
<td>fileindizes/pathnamehashes of the files that should be removed, separated by comma</td>
<td></td>
<tr>
<td>solutionfileitemid</td>
<td>text</td>
<td>null</td>
<td>optional</td>
<td>default: string(0) ""
</td>
<td>fileitemid for the solutionfile</td>
<td></td>
<tr>
<td>activityid</td>
<td>int</td>
<td>null</td>
<td>optional</td>
<td>default: int(0)
</td>
<td>id of related activity</td>
<td></td>
<tr>
<td>is_teacherexample</td>
<td>int</td>
<td>null</td>
<td>optional</td>
<td>default: int(0)
</td>
<td>is a teacher example?</td>
<td></td>
</table>
Returns:<pre>{
    "exampleid": "int null ('id of created example')",
    "success": "bool null ('status')"
}</pre>
<h2>diggrplus_grade_descriptor</h2>
<div>Grade a descriptor</div>
<div>type: write</div>
Params: <table>
<tr>
<td>descriptorid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of descriptor</td>
<td></td>
<tr>
<td>grading</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>grade for this descriptor</td>
<td></td>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of course</td>
<td></td>
<tr>
<td>userid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of user, if 0 current user</td>
<td></td>
<tr>
<td>role</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>user role (0 == student, 1 == teacher)</td>
<td></td>
<tr>
<td>subjectid</td>
<td>int</td>
<td>null</td>
<td>optional</td>
<td>default: int(-1)
</td>
<td>subjectid</td>
<td></td>
</table>
Returns:<pre>{
    "success": "bool null ('true if grading was successful')"
}</pre>
<h2>diggrplus_msteams_import_students</h2>
<div></div>
<div>type: write</div>
Params: <table>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of course to import to</td>
<td></td>
<tr>
<td>access_token</td>
<td>text</td>
<td>null</td>
<td>required</td>
<td></td>
<td>msteams access token</td>
<td></td>
<tr>
<td>teamid</td>
<td>text</td>
<td>null</td>
<td>required</td>
<td></td>
<td>uuid of msteams team to import from</td>
<td></td>
</table>
Returns:<pre>{
    "total_count": "int null ('number of users in the team')",
    "imported_count": "int null ('number of newly imported users')"
}</pre>
<h2>diggrplus_msteams_get_access_token</h2>
<div></div>
<div>type: write</div>
Params: <table>
<tr>
<td>tenantid</td>
<td>text</td>
<td>null</td>
<td>required</td>
<td></td>
<td></td>
<td></td>
<tr>
<td>authentication_token</td>
<td>text</td>
<td>null</td>
<td>required</td>
<td></td>
<td>msteams authentication token</td>
<td></td>
</table>
Returns:<pre>{
    "access_token": "text null"
}</pre>
<h2>block_exacomp_grade_item</h2>
<div>Grade an item
grade an item</div>
<div>type: write</div>
Params: <table>
<tr>
<td>userid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of user</td>
<td></td>
<tr>
<td>value</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>value for grading</td>
<td></td>
<tr>
<td>status</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>status</td>
<td></td>
<tr>
<td>comment</td>
<td>text</td>
<td>null</td>
<td>required</td>
<td></td>
<td>comment of grading</td>
<td></td>
<tr>
<td>itemid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of item</td>
<td></td>
<tr>
<td>comps</td>
<td>text</td>
<td>null</td>
<td>required</td>
<td></td>
<td>comps for example - positive grading</td>
<td></td>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>if of course</td>
<td></td>
</table>
Returns:<pre>{
    "success": "bool null ('true if grading was successful')"
}</pre>
<h2>block_exacomp_get_user_examples</h2>
<div>get examples created by a specific user
grade an item</div>
<div>type: read</div>
Params: <table>
</table>
Returns:<pre>[
    {
        "exampleid": "int null ('id of example')",
        "exampletitle": "text null ('title of example')",
        "example_status": "int null ('status of example')",
        "exampletopicid": "int null ('topic id where example belongs to')"
    },
    "..."
]</pre>
<h2>block_exacomp_get_user_profile</h2>
<div>get a list of courses with their competencies</div>
<div>type: read</div>
Params: <table>
<tr>
<td>userid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of user</td>
<td></td>
</table>
Returns:<pre>{
    "user": {
        "competencies": {
            "total": "int null ('amount of total competencies')",
            "reached": "int null ('amount of reached competencies')"
        },
        "examples": {
            "total": "int null ('amount of total competencies')",
            "reached": "int null ('amount of reached competencies')"
        }
    },
    "subjects": [
        {
            "title": "text null ('subject title')",
            "data": {
                "competencies": {
                    "total": "int null ('amount of total competencies')",
                    "reached": "int null ('amount of reached competencies')"
                },
                "examples": {
                    "total": "int null ('amount of total competencies')",
                    "reached": "int null ('amount of reached competencies')"
                }
            },
            "topics": [
                {
                    "title": "text null ('topic title')",
                    "data": {
                        "competencies": {
                            "total": "int null ('amount of total competencies')",
                            "reached": "int null ('amount of reached competencies')"
                        },
                        "examples": {
                            "total": "int null ('amount of total competencies')",
                            "reached": "int null ('amount of reached competencies')"
                        }
                    }
                },
                "..."
            ]
        },
        "..."
    ]
}</pre>
<h2>block_exacomp_update_example</h2>
<div>update an example</div>
<div>type: write</div>
Params: <table>
<tr>
<td>exampleid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of example</td>
<td></td>
<tr>
<td>name</td>
<td>text</td>
<td>null</td>
<td>required</td>
<td></td>
<td>title of example</td>
<td></td>
<tr>
<td>description</td>
<td>text</td>
<td>null</td>
<td>required</td>
<td></td>
<td>description of example</td>
<td></td>
<tr>
<td>externalurl</td>
<td>text</td>
<td>null</td>
<td>required</td>
<td></td>
<td></td>
<td></td>
<tr>
<td>comps</td>
<td>text</td>
<td>null</td>
<td>required</td>
<td></td>
<td>list of competencies, seperated by comma</td>
<td></td>
<tr>
<td>filename</td>
<td>text</td>
<td>null</td>
<td>required</td>
<td></td>
<td>filename, used to look up file and create a new one in the exaport file area</td>
<td></td>
<tr>
<td>fileitemid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>fileitemid</td>
<td></td>
</table>
Returns:<pre>{
    "success": "bool null ('true if successful')"
}</pre>
<h2>block_exacomp_delete_example</h2>
<div>delete a custom item
delete example</div>
<div>type: write</div>
Params: <table>
<tr>
<td>exampleid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of example</td>
<td></td>
</table>
Returns:<pre>{
    "success": "bool null ('true if successful')"
}</pre>
<h2>block_exacomp_get_competencies_by_topic</h2>
<div>get competencies for a specific topic
Get all available competencies</div>
<div>type: read</div>
Params: <table>
<tr>
<td>userid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of user</td>
<td></td>
<tr>
<td>topicid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of topic</td>
<td></td>
</table>
Returns:<pre>[
    {
        "descriptorid": "int null ('id of example')",
        "descriptortitle": "text null ('title of example')"
    },
    "..."
]</pre>
<h2>dakora_set_competence</h2>
<div>set competence for student
Set a competence for a user</div>
<div>type: write</div>
Params: <table>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of course</td>
<td></td>
<tr>
<td>userid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of user, if 0 current user</td>
<td></td>
<tr>
<td>compid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>competence id</td>
<td></td>
<tr>
<td>comptype</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>type of competence: descriptor, topic, subject</td>
<td></td>
<tr>
<td>role</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>user role (0 == student, 1 == teacher)</td>
<td></td>
<tr>
<td>value</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>evaluation value, only set for TK (0 to 3)</td>
<td></td>
<tr>
<td>additionalinfo</td>
<td>float</td>
<td>null</td>
<td>required</td>
<td></td>
<td>decimal between 1 and 6</td>
<td></td>
<tr>
<td>evalniveauid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>evaluation niveau (-1, 1, 2, 3)</td>
<td></td>
<tr>
<td>subjectid</td>
<td>int</td>
<td>null</td>
<td>optional</td>
<td>default: int(-1)
</td>
<td>subjectid</td>
<td></td>
</table>
Returns:<pre>{
    "success": "bool null ('status of success, either true (1) or false (0)')"
}</pre>
<h2>dakora_get_courses</h2>
<div>get courses for user for dakora app
get courses</div>
<div>type: read</div>
Params: <table>
<tr>
<td>userid</td>
<td>int</td>
<td>null</td>
<td>optional</td>
<td>default: NULL
</td>
<td>id of user</td>
<td></td>
</table>
Returns:<pre>[
    {
        "courseid": "int null ('id of course')",
        "fullname": "text null ('fullname of course')",
        "shortname": "raw null ('shortname of course')",
        "exarole": "int null ('1=trainer, 2=student')",
        "teachercanedit": "bool null",
        "assessment_config": "raw null ('which course specific assessment_config is used')"
    },
    "..."
]</pre>
<h2>dakora_get_topics_by_course</h2>
<div>get topics for course for dakora app associated with examples
get courses</div>
<div>type: read</div>
Params: <table>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of course</td>
<td></td>
<tr>
<td>userid</td>
<td>int</td>
<td>null</td>
<td>optional</td>
<td>default: int(0)
</td>
<td>id of user, 0 for current user</td>
<td></td>
<tr>
<td>forall</td>
<td>bool</td>
<td>null</td>
<td>optional</td>
<td>default: int(0)
</td>
<td>for all users = true, for one user = false</td>
<td></td>
</table>
Returns:<pre>[
    {
        "topicid": "int null ('id of topic')",
        "topictitle": "text null ('title of topic')",
        "numbering": "text null ('numbering for topic')",
        "subjectid": "int null ('id of subject')",
        "subjecttitle": "text null ('title of subject')",
        "visible": "int null ('visibility of topic in current context')",
        "used": "int null ('used in current context')"
    },
    "..."
]</pre>
<h2>dakora_get_all_topics_by_course</h2>
<div>get topics for course for dakora app
get courses</div>
<div>type: read</div>
Params: <table>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of course</td>
<td></td>
<tr>
<td>userid</td>
<td>int</td>
<td>null</td>
<td>optional</td>
<td>default: int(0)
</td>
<td>id of user, 0 for current user</td>
<td></td>
<tr>
<td>forall</td>
<td>bool</td>
<td>null</td>
<td>optional</td>
<td>default: int(0)
</td>
<td>for all users = true, for one user = false</td>
<td></td>
<tr>
<td>groupid</td>
<td>int</td>
<td>null</td>
<td>optional</td>
<td>default: NULL
</td>
<td>id of user, 0 for current user</td>
<td></td>
</table>
Returns:<pre>{
    "topics": [
        {
            "topicid": "int null ('id of topic')",
            "topictitle": "text null ('title of topic')",
            "topicdescription": "raw null ('description of topic')",
            "numbering": "text null ('numbering for topic')",
            "subjectid": "int null ('id of subject')",
            "subjecttitle": "text null ('title of subject')",
            "visible": "int null ('visibility of topic in current context')",
            "used": "int null ('used in current context')"
        },
        "..."
    ],
    "activitylist": [
        {
            "id": "int null ('id')",
            "name": "text null ('name')"
        },
        "..."
    ]
}</pre>
<h2>dakora_get_descriptors</h2>
<div>get descriptors for topic for dakora app associated with examples
get descriptors for one topic, considering the visibility</div>
<div>type: read</div>
Params: <table>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of course</td>
<td></td>
<tr>
<td>topicid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of topic</td>
<td></td>
<tr>
<td>userid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of user, 0 for current user</td>
<td></td>
<tr>
<td>forall</td>
<td>bool</td>
<td>null</td>
<td>required</td>
<td></td>
<td>for all users = true, for one user = false</td>
<td></td>
</table>
Returns:<pre>[
    {
        "descriptorid": "int null ('id of descriptor')",
        "descriptortitle": "text null ('title of descriptor')",
        "numbering": "text null ('numbering for descriptor')",
        "niveautitle": "text null ('title of niveau')",
        "niveaudescription": "text null ('description of niveau')",
        "niveauid": "int null ('id of niveau')",
        "visible": "int null ('visibility of topic in current context')",
        "niveauvisible": "bool null ('if niveau is visible')",
        "used": "int null ('used in current context')",
        "niveausort": "int null ('sorting for ids')"
    },
    "..."
]</pre>
<h2>dakora_get_all_descriptors</h2>
<div>get descriptors for topic for dakora app
get courses</div>
<div>type: read</div>
Params: <table>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of course</td>
<td></td>
<tr>
<td>topicid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of topic</td>
<td></td>
<tr>
<td>userid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of user, 0 for current user</td>
<td></td>
<tr>
<td>forall</td>
<td>bool</td>
<td>null</td>
<td>required</td>
<td></td>
<td>for all users = true, for one user = false</td>
<td></td>
<tr>
<td>editmode</td>
<td>bool</td>
<td>null</td>
<td>optional</td>
<td>default: int(0)
</td>
<td>when editmode is active, descriptors fo hidden niveaus should be loaded</td>
<td></td>
</table>
Returns:<pre>[
    {
        "descriptorid": "int null ('id of descriptor')",
        "descriptortitle": "text null ('title of descriptor')",
        "numbering": "text null ('numbering for descriptor')",
        "niveautitle": "text null ('title of niveau')",
        "niveauid": "int null ('id of niveau')",
        "niveaudescription": "text null ('description of niveau')",
        "visible": "int null ('visibility of topic in current context')",
        "used": "int null ('used in current context')",
        "gradingisold": "bool null ('true when there are newer gradings in the childcompetences')",
        "niveauvisible": "bool null ('if niveau is visible')",
        "niveausort": "int null ('sorting for ids')"
    },
    "..."
]</pre>
<h2>dakora_get_descriptor_children</h2>
<div>get children (childdescriptor and examples) for descriptor for dakora app (only childs associated with examples)
get courses</div>
<div>type: read</div>
Params: <table>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of course</td>
<td></td>
<tr>
<td>descriptorid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of parent descriptor</td>
<td></td>
<tr>
<td>userid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of user, 0 for current user</td>
<td></td>
<tr>
<td>forall</td>
<td>bool</td>
<td>null</td>
<td>required</td>
<td></td>
<td>for all users = true, for one user = false</td>
<td></td>
</table>
Returns:<pre>{
    "children": [
        {
            "descriptorid": "int null ('id of child')",
            "descriptortitle": "text null ('title of child')",
            "numbering": "text null ('numbering for child')",
            "teacherevaluation": "int null ('grading of child')",
            "evalniveauid": "int null ('evaluation niveau id')",
            "timestampteacher": "int null ('timestamp of teacher evaluation')",
            "studentevaluation": "int null ('self evaluation of child')",
            "timestampstudent": "int null ('timestamp of student evaluation')",
            "examplestotal": "int null ('total number of material')",
            "examplesvisible": "int null ('visible number of material')",
            "examplesinwork": "int null ('edited number of material')",
            "visible": "int null ('visibility of child')",
            "used": "int null ('used in current context')"
        },
        "..."
    ],
    "examples": [
        {
            "exampleid": "int null ('id of example')",
            "exampletitle": "text null ('title of example')",
            "examplestate": "int null ('state of example, always 0 if for all students')",
            "visible": "int null ('visibility of example')",
            "used": "int null ('used in current context')"
        },
        "..."
    ],
    "examplestotal": "int null ('number of total examples')",
    "examplesvisible": "int null ('number of visible examples')",
    "examplesinwork": "int null ('number of examples in work')"
}</pre>
<h2>dakora_get_examples_for_descriptor</h2>
<div>get examples for descriptor for dakora app</div>
<div>type: read</div>
Params: <table>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of course</td>
<td></td>
<tr>
<td>descriptorid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of parent descriptor</td>
<td></td>
<tr>
<td>userid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of user, if 0 current user</td>
<td></td>
<tr>
<td>forall</td>
<td>bool</td>
<td>null</td>
<td>required</td>
<td></td>
<td>if all users = true, only one user = false</td>
<td></td>
</table>
Returns:<pre>[
    {
        "exampleid": "int null ('id of descriptor')",
        "exampletitle": "text null ('title of descriptor')",
        "examplestate": "int null ('state of example, always 0 if for all students')",
        "visible": "int null ('visibility of example in current context')",
        "used": "int null ('used in current context')"
    },
    "..."
]</pre>
<h2>dakora_get_examples_for_descriptor_with_grading</h2>
<div>get examples for descriptor with additional grading information</div>
<div>type: read</div>
Params: <table>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of course</td>
<td></td>
<tr>
<td>descriptorid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of parent descriptor</td>
<td></td>
<tr>
<td>userid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of user, if 0 current user</td>
<td></td>
<tr>
<td>forall</td>
<td>bool</td>
<td>null</td>
<td>required</td>
<td></td>
<td>if all users = true, only one user = false</td>
<td></td>
</table>
Returns:<pre>[
    {
        "exampleid": "int null ('id of descriptor')",
        "exampletitle": "text null ('title of descriptor')",
        "examplestate": "int null ('state of example, always 0 if for all students')",
        "visible": "int null ('visibility of example in current context')",
        "used": "int null ('used in current context')",
        "teacherevaluation": "int null ('example evaluation of teacher')",
        "studentevaluation": "int null ('example evaluation of student')",
        "evalniveauid": "int null ('evaluation niveau id')",
        "timestampteacher": "int null ('timestamp for teacher evaluation')",
        "timestampstudent": "int null ('timestamp for student evaluation')"
    },
    "..."
]</pre>
<h2>dakora_get_examples_for_descriptor_for_crosssubject</h2>
<div>get examples for descriptor for dakora app</div>
<div>type: read</div>
Params: <table>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of course</td>
<td></td>
<tr>
<td>descriptorid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of parent descriptor</td>
<td></td>
<tr>
<td>userid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of user, if 0 current user</td>
<td></td>
<tr>
<td>forall</td>
<td>bool</td>
<td>null</td>
<td>required</td>
<td></td>
<td>if all users = true, only one user = false</td>
<td></td>
<tr>
<td>crosssubjid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of crosssubject</td>
<td></td>
</table>
Returns:<pre>[
    {
        "exampleid": "int null ('id of descriptor')",
        "exampletitle": "text null ('title of descriptor')",
        "examplestate": "int null ('state of example, always 0 if for all students')",
        "visible": "int null ('visibility of example in current context')",
        "used": "int null ('used in current context')"
    },
    "..."
]</pre>
<h2>dakora_get_examples_for_descriptor_for_crosssubject_with_grading</h2>
<div>get examples for descriptor with additional grading information</div>
<div>type: read</div>
Params: <table>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of course</td>
<td></td>
<tr>
<td>descriptorid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of parent descriptor</td>
<td></td>
<tr>
<td>userid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of user, if 0 current user</td>
<td></td>
<tr>
<td>forall</td>
<td>bool</td>
<td>null</td>
<td>required</td>
<td></td>
<td>if all users = true, only one user = false</td>
<td></td>
<tr>
<td>crosssubjid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of crosssubject</td>
<td></td>
</table>
Returns:<pre>[
    {
        "exampleid": "int null ('id of descriptor')",
        "exampletitle": "text null ('title of descriptor')",
        "examplestate": "int null ('state of example, always 0 if for all students')",
        "visible": "int null ('visibility of example in current context')",
        "used": "int null ('used in current context')",
        "teacherevaluation": "int null ('example evaluation of teacher')",
        "studentevaluation": "int null ('example evaluation of student')",
        "evalniveauid": "int null ('evaluation niveau id')",
        "timestampteacher": "int null ('timestamp for teacher evaluation')",
        "timestampstudent": "int null ('timestamp for student evaluation')"
    },
    "..."
]</pre>
<h2>dakora_get_example_overview</h2>
<div>get example overview for dakora app</div>
<div>type: read</div>
Params: <table>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of course</td>
<td></td>
<tr>
<td>exampleid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of example</td>
<td></td>
<tr>
<td>userid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of user, if 0 current user</td>
<td></td>
</table>
Returns:<pre>{
    "title": "text null ('title of example')",
    "description": "text null ('description of example')",
    "taskfileurl": "text null ('task fileurl')",
    "taskfilenames": "text null ('task filename')",
    "solutionfilename": "text null ('task filename')",
    "externalurl": "text null ('externalurl of example')",
    "externaltask": "text null ('url of associated module')",
    "task": "text null ('@deprecated')",
    "taskfilecount": "text null ('number of files for the task')",
    "solution": "text null ('solution(url\/description) of example')",
    "timeframe": "text null ('timeframe as string')",
    "hassubmissions": "bool null ('true if example has already submissions')",
    "solution_visible": "bool null ('visibility for example solution in current context')",
    "exampletaxonomies": "text null ('taxonomies seperated by comma')",
    "exampletaxids": "text null ('taxids seperated by comma')",
    "is_teacherexample": "bool null ('is teacher example?')"
}</pre>
<h2>diggrplus_get_example_overview</h2>
<div>get example overview for dakora app</div>
<div>type: read</div>
Params: <table>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of course</td>
<td></td>
<tr>
<td>exampleid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of example</td>
<td></td>
<tr>
<td>userid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of user, if 0 current user</td>
<td></td>
</table>
Returns:<pre>{
    "id": "text null ('id of example')",
    "visible": "bool null ('visibility of example')",
    "title": "text null ('title of example')",
    "description": "text null ('description of example')",
    "solutionfilename": "text null ('task filename')",
    "externalurl": "text null ('externalurl of example')",
    "externaltask": "text null ('url of associated module')",
    "solution": "text null ('solution(url\/description) of example')",
    "timeframe": "text null ('timeframe as string')",
    "hassubmissions": "bool null ('true if example has already submissions')",
    "solution_visible": "bool null ('visibility for example solution in current context')",
    "exampletaxonomies": "text null ('taxonomies seperated by comma')",
    "exampletaxids": "text null ('taxids seperated by comma')",
    "is_teacherexample": "bool null ('is teacher example?')",
    "creatorid": "int null ('creatorid')",
    "annotation": "text null ('annotation by the teacher for this example in this course')",
    "taskfiles": [
        {
            "name": "text null ('title of taskfile')",
            "url": "url null ('file url')",
            "type": "text null ('mime type for file')"
        },
        "... taskfiles of the example ..."
    ]
}</pre>
<h2>dakora_add_example_to_learning_calendar</h2>
<div>add example to learning calendar for dakora
get courses</div>
<div>type: write</div>
Params: <table>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of course</td>
<td></td>
<tr>
<td>exampleid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of example</td>
<td></td>
<tr>
<td>creatorid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of creator</td>
<td></td>
<tr>
<td>userid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of user, if 0 current user</td>
<td></td>
<tr>
<td>forall</td>
<td>bool</td>
<td>null</td>
<td>required</td>
<td></td>
<td>for all users = true, for one user = false</td>
<td></td>
<tr>
<td>groupid</td>
<td>int</td>
<td>null</td>
<td>optional</td>
<td>default: NULL
</td>
<td>id of group</td>
<td></td>
</table>
Returns:<pre>{
    "scheduleid": "int null ('id of the single added example')",
    "success": "bool null ('status of success, either true (1) or false (0)')"
}</pre>
<h2>dakora_get_descriptors_for_example</h2>
<div>get descriptors where example is associated
Get descriptors for example</div>
<div>type: read</div>
Params: <table>
<tr>
<td>exampleid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of example</td>
<td></td>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of course</td>
<td></td>
<tr>
<td>userid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of user</td>
<td></td>
<tr>
<td>forall</td>
<td>bool</td>
<td>null</td>
<td>required</td>
<td></td>
<td>for all users = true, for one user = false</td>
<td></td>
</table>
Returns:<pre>[
    {
        "descriptorid": "int null ('id of descriptor')",
        "title": "text null ('title of descriptor')",
        "teacherevaluation": "int null ('evaluation of descriptor')",
        "studentevaluation": "int null ('student evaluation of descriptor')",
        "evalniveauid": "int null ('evaluation niveau id')",
        "niveauid": "int null ('id of niveau')",
        "additionalinfo": "float null ('additional grading for descriptor')",
        "topicid": "int null ('id of topic')",
        "numbering": "text null ('descriptor numbering')",
        "child": "bool null ('true: child, false: parent')",
        "parentid": "int null ('parentid if child, 0 otherwise')",
        "gradingisold": "bool null ('true when there are newer gradings in the childcompetences')",
        "reviewerid": "int null ('id of reviewer')",
        "reviewername": "text null ('name of reviewer')"
    },
    "..."
]</pre>
<h2>dakora_get_example_grading</h2>
<div>get student and teacher evaluation for example
Get example grading for user</div>
<div>type: read</div>
Params: <table>
<tr>
<td>exampleid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of example</td>
<td></td>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of course</td>
<td></td>
<tr>
<td>userid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of user, if 0 current user</td>
<td></td>
</table>
Returns:<pre>{
    "teacherevaluation": "int null ('teacher evaluation for student and example')",
    "studentevaluation": "int null ('self evaluation for example')",
    "evalniveauid": "int null ('evaluation niveau id')"
}</pre>
<h2>dakora_get_topic_grading</h2>
<div>get student and teacher evaluation for topic
Get topic grading for user</div>
<div>type: read</div>
Params: <table>
<tr>
<td>topicid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of topic</td>
<td></td>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of course</td>
<td></td>
<tr>
<td>userid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of user, if 0 current user</td>
<td></td>
</table>
Returns:<pre>{
    "teacherevaluation": "int null ('teacher evaluation for student and topic')",
    "additionalinfo": "float null ('teacher additional info for student and topic')",
    "studentevaluation": "int null ('self evaluation for topic')",
    "evalniveauid": "int null ('evaluation niveau id')",
    "timestampteacher": "int null ('timestamp for teacher evaluation')",
    "timestampstudent": "int null ('timestamp for student evaluation')"
}</pre>
<h2>dakora_get_subject_grading</h2>
<div>get student and teacher evaluation for subject
Get subject grading for user</div>
<div>type: read</div>
Params: <table>
<tr>
<td>subjectid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of subject</td>
<td></td>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of course</td>
<td></td>
<tr>
<td>userid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of user, if 0 current user</td>
<td></td>
</table>
Returns:<pre>{
    "teacherevaluation": "int null ('teacher evaluation for student and subject')",
    "additionalinfo": "float null ('teacher additional info for student and subject')",
    "studentevaluation": "int null ('self evaluation for subject')",
    "evalniveauid": "int null ('evaluation niveau id')",
    "timestampteacher": "int null ('timestamp for teacher evaluation')",
    "timestampstudent": "int null ('timestamp for student evaluation')"
}</pre>
<h2>dakora_get_user_role</h2>
<div>get user role 1= trainer, 2= student
return 1 for trainer
2 for student
0 if false</div>
<div>type: read</div>
Params: <table>
</table>
Returns:<pre>{
    "role": "int null ('1=trainer, 2=student')"
}</pre>
<h2>dakora_get_students_and_groups_for_course</h2>
<div>get list of students for course</div>
<div>type: read</div>
Params: <table>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of course</td>
<td></td>
</table>
Returns:<pre>{
    "students": [
        {
            "studentid": "int null ('id of student')",
            "firstname": "text null ('firstname of student')",
            "lastname": "text null ('lastname of student')",
            "profilepicture": "text null ('link to  profile picture')"
        },
        "..."
    ],
    "groups": [
        {
            "id": "int null ('id of group')",
            "name": "text null ('name of group')",
            "picture": "text null ('link to  picture')"
        },
        "..."
    ]
}</pre>
<h2>dakora_get_students_for_teacher</h2>
<div>get list of students that are enrolled in any course of a teacher</div>
<div>type: read</div>
Params: <table>
<tr>
<td>userid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of user</td>
<td></td>
</table>
Returns:<pre>[
    {
        "id": "int null ('id of student')",
        "firstname": "text null ('firstname of student')",
        "lastname": "text null ('lastname of student')"
    },
    "..."
]</pre>
<h2>dakora_get_teachers_for_student</h2>
<div>get list of teachers in any course of the student</div>
<div>type: read</div>
Params: <table>
<tr>
<td>userid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of user</td>
<td></td>
</table>
Returns:<pre>[
    {
        "id": "int null ('id of teacher')",
        "firstname": "text null ('firstname of teacher')",
        "lastname": "text null ('lastname of teacher')"
    },
    "..."
]</pre>
<h2>dakora_get_examples_pool</h2>
<div>get list of examples for weekly schedule pool
Get examples for pool</div>
<div>type: read</div>
Params: <table>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of course</td>
<td></td>
<tr>
<td>userid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of user, if 0 current user</td>
<td></td>
</table>
Returns:<pre>[
    {
        "exampleid": "int null ('id of example')",
        "title": "text null ('title of example')",
        "student_evaluation": "int null ('self evaluation of student')",
        "teacher_evaluation": "int null ('evaluation of teacher')",
        "evalniveauid": "int null ('evaluation niveau id')",
        "courseid": "int null ('example course')",
        "state": "int null ('state of example')",
        "scheduleid": "int null ('id in schedule context')",
        "courseshortname": "text null ('shortname of example course')",
        "coursefullname": "text null ('full name of example course')",
        "exampletaxonomies": "text null ('taxonomies seperated by comma')",
        "exampletaxids": "text null ('taxids seperated by comma')",
        "source": "text null ('tag where the material comes from')",
        "timeframe": "text null ('timeframe, suggested time')"
    },
    "..."
]</pre>
<h2>dakora_get_examples_trash</h2>
<div>get examples for trash bin
Get examples for trash</div>
<div>type: read</div>
Params: <table>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of course</td>
<td></td>
<tr>
<td>userid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of user, if 0 current user</td>
<td></td>
</table>
Returns:<pre>[
    {
        "exampleid": "int null ('id of example')",
        "title": "text null ('title of example')",
        "student_evaluation": "int null ('self evaluation of student')",
        "teacher_evaluation": "int null ('evaluation of teacher')",
        "evalniveauid": "int null ('evaluation niveau id')",
        "courseid": "int null ('example course')",
        "state": "int null ('state of example')",
        "scheduleid": "int null ('id in schedule context')",
        "courseshortname": "text null ('shortname of example course')",
        "coursefullname": "text null ('full name of example course')",
        "source": "text null ('tag where the material comes from')"
    },
    "..."
]</pre>
<h2>dakora_set_example_time_slot</h2>
<div>set start and end time for example
set example time slot</div>
<div>type: write</div>
Params: <table>
<tr>
<td>scheduleid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id in schedule context</td>
<td></td>
<tr>
<td>start</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>start timestamp</td>
<td></td>
<tr>
<td>end</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>end timestamp</td>
<td></td>
<tr>
<td>deleted</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>delete item</td>
<td></td>
</table>
Returns:<pre>{
    "timeremaining": "text null ('time planned minus timeframe = timeremaining')",
    "timeplanned": "text null ('time planned ')",
    "timesuggested": "text null ('timeframe')",
    "success": "bool null ('status of success, either true (1) or false (0)')"
}</pre>
<h2>dakora_remove_example_from_schedule</h2>
<div>remove example from weekly schedule
remove example from time slot</div>
<div>type: write</div>
Params: <table>
<tr>
<td>scheduleid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of schedule entry</td>
<td></td>
</table>
Returns:<pre>{
    "success": "bool null ('status of success, either true (1) or false (0)')"
}</pre>
<h2>dakora_add_examples_to_schedule_for_all</h2>
<div>add examples to the schedules of all course students
remove example from time slot</div>
<div>type: write</div>
Params: <table>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of course</td>
<td></td>
</table>
Returns:<pre>{
    "success": "bool null ('status of success, either true (1) or false (0)')"
}</pre>
<h2>dakora_get_examples_for_time_slot</h2>
<div>get examples for a special start to end period (e.g. day)
Get examples for time slot</div>
<div>type: read</div>
Params: <table>
<tr>
<td>userid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of user, if 0 current user</td>
<td></td>
<tr>
<td>start</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>start timestamp</td>
<td></td>
<tr>
<td>end</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>end timestamp</td>
<td></td>
</table>
Returns:<pre>[
    {
        "exampleid": "int null ('id of example')",
        "title": "text null ('title of example')",
        "start": "int null ('start of event')",
        "end": "int null ('end of event')",
        "timeframe": "text null ('timeframe')",
        "student_evaluation": "int null ('self evaluation of student')",
        "teacher_evaluation": "int null ('evaluation of teacher')",
        "evalniveauid": "int null ('evaluation niveau id')",
        "courseid": "int null ('example course')",
        "state": "int null ('state of example')",
        "scheduleid": "int null ('id in schedule context')",
        "courseshortname": "text null ('shortname of example course')",
        "coursefullname": "text null ('full name of example course')",
        "exampletaxonomies": "text null ('taxonomies seperated by comma')",
        "exampletaxids": "text null ('taxids seperated by comma')",
        "source": "text null ('tag where the material comes from')",
        "schedule_marker": "text null ('tag for the marker on the material in the weekly schedule')",
        "editable": "bool null ('for blocking events: show if editable')"
    },
    "..."
]</pre>
<h2>dakora_get_cross_subjects_by_course</h2>
<div>get cross subjects for an user in course context (allways all crosssubjs, even if not associated)
Get cross subjects</div>
<div>type: read</div>
Params: <table>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of course</td>
<td></td>
<tr>
<td>userid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of user, if 0 current user</td>
<td></td>
<tr>
<td>forall</td>
<td>bool</td>
<td>null</td>
<td>required</td>
<td></td>
<td>for all users = true, for one user = false</td>
<td></td>
</table>
Returns:<pre>[
    {
        "id": "int null ('id of cross subject')",
        "title": "text null ('title of cross subject')",
        "description": "text null ('description of cross subject')",
        "subjectid": "int null ('subject id, cross subject is associated with')",
        "visible": "int null ('visibility of crosssubject for selected student')",
        "groupcategory": "text null ('name of groupcategory')",
        "hasmaterial": "bool null ('true or false if crosssubject has material')",
        "examples": [
            {
                "exampleid": "int null ('id of example')",
                "exampletitle": "text null ('title of example')",
                "examplestate": "int null ('state of example, always 0 if for all students')",
                "visible": "int null ('visibility of example in current context')",
                "used": "int null ('used in current context')",
                "teacherevaluation": "int null ('example evaluation of teacher')",
                "studentevaluation": "int null ('example evaluation of student')",
                "timestampteacher": "int null ('timestamp of teacher evaluation')",
                "timestampstudent": "int null ('timestamp of student evaluation')",
                "evalniveauid": "int null ('evaluation niveau id')",
                "solution_visible": "bool null ('visibility for example solution in current context')"
            },
            "..."
        ],
        "additionalinfo": "float null ('additional grading')",
        "teacherevaluation": "int null ('grading of child')",
        "evalniveauid": "int null ('evaluation niveau id')",
        "timestampteacher": "int null ('timestamp of teacher evaluation')",
        "studentevaluation": "int null ('self evaluation of child')",
        "timestampstudent": "int null ('timestamp of student evaluation')"
    },
    "..."
]</pre>
<h2>dakora_get_descriptors_by_cross_subject</h2>
<div>get descriptors for a cross subject associated with examples
Get cross subjects</div>
<div>type: read</div>
Params: <table>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of course</td>
<td></td>
<tr>
<td>crosssubjid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of cross subject</td>
<td></td>
<tr>
<td>userid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of user, if 0 current user</td>
<td></td>
<tr>
<td>forall</td>
<td>bool</td>
<td>null</td>
<td>required</td>
<td></td>
<td>for all users = true, for one user = false</td>
<td></td>
</table>
Returns:<pre>[
    {
        "descriptorid": "int null ('id of descriptor')",
        "descriptortitle": "text null ('title of descriptor')",
        "numbering": "text null ('numbering for descriptor')",
        "niveautitle": "text null ('title of nivaue')",
        "niveauid": "int null ('id of niveau')",
        "visible": "int null ('visibility of example in current context')",
        "used": "int null ('used in current context')"
    },
    "..."
]</pre>
<h2>dakora_get_all_descriptors_by_cross_subject</h2>
<div>get descriptors for a cross subject
Get cross subjects</div>
<div>type: read</div>
Params: <table>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of course</td>
<td></td>
<tr>
<td>crosssubjid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of cross subject</td>
<td></td>
<tr>
<td>userid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of user, if 0 current user</td>
<td></td>
<tr>
<td>forall</td>
<td>bool</td>
<td>null</td>
<td>required</td>
<td></td>
<td>for all users = true, for one user = false</td>
<td></td>
</table>
Returns:<pre>[
    {
        "descriptorid": "int null ('id of descriptor')",
        "descriptortitle": "text null ('title of descriptor')",
        "numbering": "text null ('numbering for descriptor')",
        "niveautitle": "text null ('title of nivaue')",
        "niveauid": "int null ('id of niveau')",
        "visible": "int null ('visibility of example in current context')",
        "used": "int null ('used in current context')"
    },
    "..."
]</pre>
<h2>dakora_get_descriptor_children_for_cross_subject</h2>
<div>get children in context of cross subject, associated with examples
get children for descriptor in cross subject context</div>
<div>type: read</div>
Params: <table>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of course</td>
<td></td>
<tr>
<td>descriptorid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of parent descriptor</td>
<td></td>
<tr>
<td>userid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of user, 0 for current user</td>
<td></td>
<tr>
<td>forall</td>
<td>bool</td>
<td>null</td>
<td>required</td>
<td></td>
<td>for all users = true, for one user = false</td>
<td></td>
<tr>
<td>crosssubjid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of cross subject</td>
<td></td>
</table>
Returns:<pre>{
    "children": [
        {
            "descriptorid": "int null ('id of child')",
            "descriptortitle": "text null ('title of child')",
            "numbering": "text null ('numbering for child')",
            "teacherevaluation": "int null ('grading of children')",
            "evalniveauid": "int null ('evaluation niveau id')",
            "timestampteacher": "int null ('timestamp of teacher evaluation')",
            "studentevaluation": "int null ('self evaluation of children')",
            "timestampstudent": "int null ('timestamp of student evaluation')",
            "examplestotal": "int null ('total number of material')",
            "examplesvisible": "int null ('visible number of material')",
            "examplesinwork": "int null ('edited number of material')",
            "visible": "int null ('visibility of child in current context')",
            "used": "int null ('used in current context')"
        },
        "..."
    ],
    "examples": [
        {
            "exampleid": "int null ('id of example')",
            "exampletitle": "text null ('title of example')",
            "examplestate": "int null ('state of example, always 0 if for all students')",
            "visible": "int null ('visibility of example in current context')",
            "used": "int null ('used in current context')"
        },
        "..."
    ],
    "examplestotal": "int null ('number of total examples')",
    "examplesvisible": "int null ('number of visible examples')",
    "examplesinwork": "int null ('number of examples in work')"
}</pre>
<h2>dakora_get_all_descriptor_children_for_cross_subject</h2>
<div>get children in context of cross subject
get children for descriptor in cross subject context</div>
<div>type: read</div>
Params: <table>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of course</td>
<td></td>
<tr>
<td>descriptorid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of parent descriptor</td>
<td></td>
<tr>
<td>userid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of user, 0 for current user</td>
<td></td>
<tr>
<td>forall</td>
<td>bool</td>
<td>null</td>
<td>required</td>
<td></td>
<td>for all users = true, for one user = false</td>
<td></td>
<tr>
<td>crosssubjid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of cross subject</td>
<td></td>
</table>
Returns:<pre>{
    "children": [
        {
            "descriptorid": "int null ('id of child')",
            "descriptortitle": "text null ('title of child')",
            "numbering": "text null ('numbering for child')",
            "teacherevaluation": "int null ('grading of children')",
            "evalniveauid": "int null ('evaluation niveau id')",
            "timestampteacher": "int null ('timestamp of teacher evaluation')",
            "studentevaluation": "int null ('self evaluation of children')",
            "timestampstudent": "int null ('timestamp of student evaluation')",
            "hasmaterial": "bool null ('true or false if child has materials')",
            "examplestotal": "int null ('total number of material')",
            "examplesvisible": "int null ('visible number of material')",
            "examplesinwork": "int null ('edited number of material')",
            "visible": "int null ('visibility of children in current context')",
            "used": "int null ('used in current context')"
        },
        "..."
    ],
    "examples": [
        {
            "exampleid": "int null ('id of example')",
            "exampletitle": "text null ('title of example')",
            "examplestate": "int null ('state of example, always 0 if for all students')",
            "visible": "int null ('visibility of example in current context')",
            "used": "int null ('used in current context')"
        },
        "..."
    ],
    "examplestotal": "int null ('number of total examples')",
    "examplesvisible": "int null ('number of visible examples')",
    "examplesinwork": "int null ('number of examples in work')"
}</pre>
<h2>dakora_get_schedule_config</h2>
<div>get configuration options for schedule units
get children for descriptor in cross subject context</div>
<div>type: read</div>
Params: <table>
</table>
Returns:<pre>{
    "units": "int null ('number of units per day')",
    "interval": "text null ('duration of unit in minutes')",
    "begin": "text null ('begin time for the first unit, format hh:mm')",
    "periods": [
        {
            "title": "text null ('id of example')"
        },
        "..."
    ]
}</pre>
<h2>dakora_get_pre_planning_storage_examples</h2>
<div>get examples for pre planning storage
get pre planning storage examples for current teacher</div>
<div>type: read</div>
Params: <table>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of course</td>
<td></td>
</table>
Returns:<pre>[
    {
        "exampleid": "int null ('id of example')",
        "title": "text null ('title of example')",
        "courseid": "int null ('example course')",
        "state": "int null ('state of example')",
        "scheduleid": "int null ('id in schedule context')"
    },
    "..."
]</pre>
<h2>dakora_get_pre_planning_storage_students</h2>
<div>get students for pre planning storage
get pre planning storage students for current teacher</div>
<div>type: read</div>
Params: <table>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of course</td>
<td></td>
</table>
Returns:<pre>[
    {
        "studentid": "int null ('id of student')",
        "firstname": "text null ('firstname of student')",
        "lastname": "text null ('lastname of student')",
        "has_examples": "bool null ('already has examples from current pre planning storage')"
    },
    "..."
]</pre>
<h2>dakora_get_pre_planning_storage_groups</h2>
<div>get students for pre planning storage
get pre planning storage students for current teacher</div>
<div>type: read</div>
Params: <table>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of course</td>
<td></td>
</table>
Returns:<pre>[
    {
        "id": "int null ('id of group')",
        "name": "text null ('name of group')",
        "has_examples": "bool null ('already has examples from current pre planning storage')"
    },
    "..."
]</pre>
<h2>dakora_has_items_in_pre_planning_storage</h2>
<div>return 0 if no items, 1 otherwise
get pre planning storage students for current teacher</div>
<div>type: read</div>
Params: <table>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of course</td>
<td></td>
</table>
Returns:<pre>{
    "success": "bool null ('status of success, either true (1) or false (0)')"
}</pre>
<h2>dakora_empty_pre_planning_storage</h2>
<div>delte all items from current pre planning storage
empty pre planning storage for current teacher</div>
<div>type: write</div>
Params: <table>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of course</td>
<td></td>
</table>
Returns:<pre>{
    "success": "bool null ('status of success, either true (1) or false (0)')"
}</pre>
<h2>dakora_add_example_to_pre_planning_storage</h2>
<div>add example to current pre planning storage
add example to current pre planning storage</div>
<div>type: write</div>
Params: <table>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of course</td>
<td></td>
<tr>
<td>exampleid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of example</td>
<td></td>
</table>
Returns:<pre>{
    "success": "bool null ('status of success')"
}</pre>
<h2>dakora_add_examples_to_students_schedule</h2>
<div>add examples from current pre planning storage to students weekly schedule
add example to current pre planning storage</div>
<div>type: write</div>
Params: <table>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of course</td>
<td></td>
<tr>
<td>examples</td>
<td>text</td>
<td>null</td>
<td>required</td>
<td></td>
<td>json array of examples</td>
<td></td>
<tr>
<td>students</td>
<td>text</td>
<td>null</td>
<td>required</td>
<td></td>
<td>json array of students</td>
<td></td>
<tr>
<td>groups</td>
<td>text</td>
<td>null</td>
<td>optional</td>
<td>default: string(0) ""
</td>
<td>json array of groups</td>
<td></td>
</table>
Returns:<pre>{
    "success": "bool null ('status of success, either true (1) or false (0)')"
}</pre>
<h2>dakora_add_examples_to_selected_students_schedule</h2>
<div>add examples from current pre planning storage to students weekly schedule
add example to current pre planning storage</div>
<div>type: write</div>
Params: <table>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of course</td>
<td></td>
<tr>
<td>students</td>
<td>text</td>
<td>null</td>
<td>required</td>
<td></td>
<td>json array of students</td>
<td></td>
<tr>
<td>groups</td>
<td>text</td>
<td>null</td>
<td>optional</td>
<td>default: string(0) ""
</td>
<td>json array of groups</td>
<td></td>
<tr>
<td>distributionid</td>
<td>text</td>
<td>null</td>
<td>optional</td>
<td>default: NULL
</td>
<td>distribution id. used for undo button</td>
<td></td>
</table>
Returns:<pre>{
    "success": "bool null ('status of success, either true (1) or false (0)')"
}</pre>
<h2>dakora_delete_examples_from_schedule</h2>
<div>remove example from weekly schedule by teacherid and distribution id
used for 'undo' button</div>
<div>type: write</div>
Params: <table>
<tr>
<td>teacherid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of teacher</td>
<td></td>
<tr>
<td>distributionid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>distribution id</td>
<td></td>
</table>
Returns:<pre>{
    "success": "bool null ('status of success, either true (1) or false (0)')"
}</pre>
<h2>dakora_undo_examples_from_schedule</h2>
<div>remove example from weekly schedule by teacherid and distribution id
used for 'undo' button</div>
<div>type: write</div>
Params: <table>
<tr>
<td>teacherid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of teacher</td>
<td></td>
<tr>
<td>distributionid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>distribution id</td>
<td></td>
</table>
Returns:<pre>{
    "success": "bool null ('status of success, either true (1) or false (0)')"
}</pre>
<h2>dakora_submit_example</h2>
<div>submit example solution
Add student submission to example.</div>
<div>type: write</div>
Params: <table>
<tr>
<td>exampleid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>exampleid</td>
<td></td>
<tr>
<td>studentvalue</td>
<td>int</td>
<td>null</td>
<td>optional</td>
<td>default: int(-1)
</td>
<td>studentvalue for grading</td>
<td></td>
<tr>
<td>url</td>
<td>url</td>
<td>null</td>
<td>required</td>
<td></td>
<td>url</td>
<td></td>
<tr>
<td>filenames</td>
<td>text</td>
<td>null</td>
<td>required</td>
<td></td>
<td>filenames, separated by comma, used to look up files and create a new ones in the exaport file area</td>
<td></td>
<tr>
<td>studentcomment</td>
<td>text</td>
<td>null</td>
<td>required</td>
<td></td>
<td>studentcomment</td>
<td></td>
<tr>
<td>itemid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>itemid (<=0 for insert, >0 for update)</td>
<td></td>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>courseid</td>
<td></td>
<tr>
<td>fileitemids</td>
<td>text</td>
<td>null</td>
<td>required</td>
<td></td>
<td>fileitemids separated by comma</td>
<td></td>
</table>
Returns:<pre>{
    "success": "bool null ('status')",
    "itemid": "int null ('itemid')"
}</pre>
<h2>diggrplus_submit_item</h2>
<div>Add studentsubmission  (exaportitem) to topic, descriptor or example</div>
<div>type: write</div>
Params: <table>
<tr>
<td>compid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of topic/example</td>
<td></td>
<tr>
<td>studentvalue</td>
<td>int</td>
<td>null</td>
<td>optional</td>
<td>default: int(-1)
</td>
<td>studentvalue for grading</td>
<td></td>
<tr>
<td>url</td>
<td>url</td>
<td>null</td>
<td>required</td>
<td></td>
<td>url</td>
<td></td>
<tr>
<td>filenames</td>
<td>text</td>
<td>null</td>
<td>required</td>
<td></td>
<td>filenames, separated by comma, used to look up files and create a new ones in the exaport file area</td>
<td></td>
<tr>
<td>studentcomment</td>
<td>text</td>
<td>null</td>
<td>required</td>
<td></td>
<td>studentcomment</td>
<td></td>
<tr>
<td>fileitemids</td>
<td>text</td>
<td>null</td>
<td>required</td>
<td></td>
<td>fileitemids separated by comma, used to look up file and create a new one in the exaport file area</td>
<td></td>
<tr>
<td>itemid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>itemid (0 for insert, >0 for update)</td>
<td></td>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>courseid</td>
<td></td>
<tr>
<td>comptype</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>comptype (example, topic, descriptor)</td>
<td></td>
<tr>
<td>itemtitle</td>
<td>text</td>
<td>null</td>
<td>optional</td>
<td>default: string(0) ""
</td>
<td>name of the item (for examples, the exampletitle is fitting, but for topics, using the topic would not be very useful</td>
<td></td>
<tr>
<td>collabuserids</td>
<td>text</td>
<td>null</td>
<td>optional</td>
<td>default: string(0) ""
</td>
<td>userids of collaborators separated by comma</td>
<td></td>
<tr>
<td>submit</td>
<td>int</td>
<td>null</td>
<td>optional</td>
<td>default: int(0)
</td>
<td>1 for submitting definitely (submitted), 0 for only creating/updating the item (inprogress)</td>
<td></td>
<tr>
<td>removefiles</td>
<td>text</td>
<td>null</td>
<td>required</td>
<td></td>
<td>fileindizes/pathnamehashes of the files that should be removed, separated by comma</td>
<td></td>
<tr>
<td>solutiondescription</td>
<td>text</td>
<td>null</td>
<td>required</td>
<td></td>
<td>description of what the student has done</td>
<td></td>
<tr>
<td>descriptorgradings</td>
<td></td>
<td></td>
<td>optional</td>
<td></td>
<td>descriptors and gradingds</td>
<td><pre>[
    {
        "descriptorid": "int null ('id of descriptor')",
        "studentvalue": "int null ('studentvalue of descriptorgrading')"
    },
    "... descriptors and gradingds ..."
]</pre></td>
</table>
Returns:<pre>{
    "success": "bool null ('status')",
    "itemid": "int null ('itemid')"
}</pre>
<h2>diggrplus_submit_item_comment</h2>
<div>Add studentsubmission  (exaportitem) to topic, descriptor or example</div>
<div>type: write</div>
Params: <table>
<tr>
<td>itemid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of item</td>
<td></td>
<tr>
<td>comment</td>
<td>text</td>
<td>null</td>
<td>required</td>
<td></td>
<td>comment text</td>
<td></td>
</table>
Returns:<pre>{
    "success": "bool null ('status')",
    "itemid": "int null ('itemid')"
}</pre>
<h2>diggrplus_get_item_comments</h2>
<div>Add studentsubmission  (exaportitem) to topic, descriptor or example</div>
<div>type: write</div>
Params: <table>
<tr>
<td>itemid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of item</td>
<td></td>
</table>
Returns:<pre>[
    {
        "id": "int null ('commentid')",
        "userid": "int null ('userid')",
        "fullname": "text null ('fullname of user')",
        "comment": "text null ('commenttext')",
        "timemodified": "int null ('timemodified')",
        "profileimageurl": "text null"
    },
    "..."
]</pre>
<h2>diggrplus_get_examples_and_items</h2>
<div>Get Items
get all items AND examples for a competence
they will be returned in one array, even though their fields may vary, but it makes ordering according to filters easier for the backend</div>
<div>type: read</div>
Params: <table>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>optional</td>
<td>default: int(-1)
</td>
<td>courseid. Used if a topic is selected as filter</td>
<td></td>
<tr>
<td>userid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of user</td>
<td></td>
<tr>
<td>compid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of subject(3)/topic(1)/descriptor(0)/example(4)   if <= 0 then show all items for user</td>
<td></td>
<tr>
<td>comptype</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>Type of competence: subject/topic/descriptor/example      if <= 0 then show all items for user</td>
<td></td>
<tr>
<td>type</td>
<td>text</td>
<td>null</td>
<td>optional</td>
<td>default: string(0) ""
</td>
<td>examples, own_items or empty</td>
<td></td>
<tr>
<td>search</td>
<td>text</td>
<td>null</td>
<td>optional</td>
<td>default: string(0) ""
</td>
<td>search string</td>
<td></td>
<tr>
<td>niveauid</td>
<td>int</td>
<td>null</td>
<td>optional</td>
<td>default: int(-1)
</td>
<td>niveauid normally stands for "LFS1, LFS2 ect</td>
<td></td>
<tr>
<td>status</td>
<td>text</td>
<td>null</td>
<td>optional</td>
<td>default: string(0) ""
</td>
<td>new, inprogress, submitted, completed.  acts as a filter</td>
<td></td>
</table>
Returns:<pre>[
    {
        "courseid": "int null",
        "status": "text null ('new, inprogress, submitted, completed')",
        "subjectid": "int null ('id of subject')",
        "subjecttitle": "text null ('title of subject')",
        "topicid": "int null ('id of topic')",
        "topictitle": "text null ('title of topic')",
        "niveautitle": "text null ('title of niveau')",
        "niveauid": "int null ('id of niveau')",
        "timemodified": "int null ('time the item was last modified --> not gradings, but only changes to the item (files, comments, name, collaborators)')",
        "example": {
            "id": "int null ('id of example')",
            "title": "text null ('title of example')",
            "description": "text null ('description of example')",
            "annotation": "text null ('annotation by the teacher for this example in this course')",
            "solutionfilename": "text null ('task filename')",
            "externalurl": "text null ('externalurl of example')",
            "externaltask": "text null ('url of associated module')",
            "solution": "text null ('solution(url\/description) of example')",
            "timeframe": "text null ('timeframe as string')",
            "hassubmissions": "bool null ('true if example has already submissions')",
            "solution_visible": "bool null ('visibility for example solution in current context')",
            "taskfiles": [
                {
                    "name": "text null ('title of taskfile')",
                    "url": "url null ('file url')",
                    "type": "text null ('mime type for file')"
                },
                "... taskfiles of the example ..."
            ],
            "teacher_evaluation": "int null ('teacher_evaluation')",
            "student_evaluation": "int null ('student_evaluation')"
        },
        "item": {
            "id": "int null ('id of item ')",
            "name": "text null ('title of item')",
            "solutiondescription": "text null ('description of item')",
            "type": "text null ('type of item (note,file,link)')",
            "url": "text null ('url')",
            "effort": "raw null ('description of the effort')",
            "teachervalue": "int null ('teacher grading')",
            "studentvalue": "int null ('student grading')",
            "teachercomment": "text null ('teacher comment')",
            "studentcomment": "text null ('student comment')",
            "owner": {
                "userid": "int null",
                "fullname": "text null",
                "profileimageurl": "text null"
            },
            "studentfiles": [
                {
                    "id": "int null ('id')",
                    "filename": "text null ('filename')",
                    "file": "url null ('file url')",
                    "mimetype": "text null ('mime type for file')",
                    "fileindex": "text null ('fileindex, used for deleting this file')"
                },
                "... files of the student's submission ..."
            ],
            "collaborators": [
                {
                    "userid": "int null ('userid of collaborator')",
                    "fullname": "text null",
                    "profileimageurl": "text null"
                },
                "... collaborators ..."
            ]
        }
    },
    "..."
]</pre>
<h2>diggrplus_get_teacher_examples_and_items</h2>
<div>Get Items
get all items AND examples for a competence
they will be returned in one array, even though their fields may vary, but it makes ordering according to filters easier for the backend</div>
<div>type: read</div>
Params: <table>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td></td>
<td></td>
<tr>
<td>studentid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td></td>
<td></td>
<tr>
<td>compid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of topic/descriptor/example   if <= 0 then show all items for user</td>
<td></td>
<tr>
<td>comptype</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>Type of competence: topic/descriptor/example      if <= 0 then show all items for user</td>
<td></td>
<tr>
<td>type</td>
<td>text</td>
<td>null</td>
<td>optional</td>
<td>default: string(0) ""
</td>
<td>examples, own_items or empty</td>
<td></td>
<tr>
<td>search</td>
<td>text</td>
<td>null</td>
<td>optional</td>
<td>default: string(0) ""
</td>
<td>search string</td>
<td></td>
<tr>
<td>niveauid</td>
<td>int</td>
<td>null</td>
<td>optional</td>
<td>default: int(-1)
</td>
<td>niveauid normally stands for "LFS1, LFS2 ect</td>
<td></td>
<tr>
<td>status</td>
<td>text</td>
<td>null</td>
<td>optional</td>
<td>default: string(0) ""
</td>
<td>new, inprogress, submitted, completed.  acts as a filter</td>
<td></td>
</table>
Returns:<pre>[
    {
        "courseid": "int null",
        "status": "text null ('new, inprogress, submitted, completed')",
        "subjectid": "int null ('id of subject')",
        "subjecttitle": "text null ('title of subject')",
        "topicid": "int null ('id of topic')",
        "topictitle": "text null ('title of topic')",
        "niveautitle": "text null ('title of niveau')",
        "niveauid": "int null ('id of niveau')",
        "timemodified": "int null ('time the item was last modified --> not gradings, but only changes to the item (files, comments, name, collaborators)')",
        "example": {
            "id": "int null ('id of example')",
            "title": "text null ('title of example')",
            "description": "text null ('description of example')",
            "annotation": "text null ('annotation by the teacher for this example in this course')",
            "solutionfilename": "text null ('task filename')",
            "externalurl": "text null ('externalurl of example')",
            "externaltask": "text null ('url of associated module')",
            "solution": "text null ('solution(url\/description) of example')",
            "timeframe": "text null ('timeframe as string')",
            "hassubmissions": "bool null ('true if example has already submissions')",
            "solution_visible": "bool null ('visibility for example solution in current context')",
            "taskfiles": [
                {
                    "name": "text null ('title of taskfile')",
                    "url": "url null ('file url')",
                    "type": "text null ('mime type for file')"
                },
                "... taskfiles of the example ..."
            ],
            "teacher_evaluation": "int null ('teacher_evaluation')",
            "student_evaluation": "int null ('student_evaluation')"
        },
        "item": {
            "id": "int null ('id of item ')",
            "name": "text null ('title of item')",
            "solutiondescription": "text null ('description of item')",
            "type": "text null ('type of item (note,file,link)')",
            "url": "text null ('url')",
            "effort": "raw null ('description of the effort')",
            "teachervalue": "int null ('teacher grading')",
            "studentvalue": "int null ('student grading')",
            "teachercomment": "text null ('teacher comment')",
            "studentcomment": "text null ('student comment')",
            "owner": {
                "userid": "int null",
                "fullname": "text null",
                "profileimageurl": "text null"
            },
            "studentfiles": [
                {
                    "id": "int null ('id')",
                    "filename": "text null ('filename')",
                    "file": "url null ('file url')",
                    "mimetype": "text null ('mime type for file')",
                    "fileindex": "text null ('fileindex, used for deleting this file')"
                },
                "... files of the student's submission ..."
            ],
            "collaborators": [
                {
                    "userid": "int null ('userid of collaborator')",
                    "fullname": "text null",
                    "profileimageurl": "text null"
                },
                "... collaborators ..."
            ]
        }
    },
    "..."
]</pre>
<h2>diggrplus_get_all_subjects_for_course_as_tree</h2>
<div>Get Subjects
get subjects from one user for one course</div>
<div>type: read</div>
Params: <table>
<tr>
<td>userid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of user</td>
<td></td>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of course</td>
<td></td>
</table>
Returns:<pre>[
    {
        "id": "int null ('id of subject')",
        "title": "text null ('title of subject')",
        "courseid": "int null ('id of course')",
        "courseshortname": "text null ('courseshortname')",
        "coursefullname": "text null ('coursefullname')",
        "topics": [
            {
                "id": "int null ('id of example')",
                "title": "text null ('title of topic')",
                "visible": "bool null ('visibility of topic in current context ')",
                "used": "bool null ('if topic is used')",
                "descriptors": [
                    {
                        "id": "int null ('id of example')",
                        "title": "text null ('title of descriptor')",
                        "visible": "bool null ('visibility of descriptor in current context ')",
                        "used": "bool null ('if descriptor is used')",
                        "childdescriptors": [
                            {
                                "id": "int null ('id of example')",
                                "title": "text null ('title of example')",
                                "visible": "bool null ('visibility of descriptor in current context ')",
                                "used": "bool null ('if descriptor is used')",
                                "examples": [
                                    {
                                        "id": "int null ('id of example')",
                                        "title": "text null ('title of example')",
                                        "creatorid": "int null ('creator of this example')",
                                        "visible": "bool null ('visibility of example in current context ')"
                                    },
                                    "..."
                                ]
                            },
                            "..."
                        ],
                        "examples": [
                            {
                                "id": "int null ('id of example')",
                                "title": "text null ('title of example')",
                                "creatorid": "int null ('creator of this example')",
                                "visible": "bool null ('visibility of example in current context ')"
                            },
                            "..."
                        ]
                    },
                    "..."
                ]
            },
            "..."
        ]
    },
    "..."
]</pre>
<h2>diggrplus_get_user_info</h2>
<div></div>
<div>type: read</div>
Params: <table>
</table>
Returns:<pre>{
    "role": "text null"
}</pre>
<h2>diggrplus_request_external_file</h2>
<div>Load a file from an external Domain to prevent CORS when loading directly in the App</div>
<div>type: read</div>
Params: <table>
<tr>
<td>url</td>
<td>url</td>
<td>null</td>
<td>required</td>
<td></td>
<td></td>
<td></td>
</table>
Returns:<pre>"file null ()"</pre>
<h2>diggrplus_grade_item</h2>
<div></div>
<div>type: write</div>
Params: <table>
<tr>
<td>itemid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td></td>
<td></td>
<tr>
<td>teachervalue</td>
<td>int</td>
<td>null</td>
<td>optional</td>
<td>default: int(-1)
</td>
<td>teacher grading of the item, -1 if none (leads to status "submitted" instead of "completed"</td>
<td></td>
<tr>
<td>descriptorgradings</td>
<td></td>
<td></td>
<td>optional</td>
<td></td>
<td>descriptors and gradingds</td>
<td><pre>[
    {
        "descriptorid": "int null ('id of descriptor')",
        "teachervalue": "int null ('teachervalue of descriptorgrading')"
    },
    "... descriptors and gradingds ..."
]</pre></td>
</table>
Returns:<pre>{
    "success": "bool null ('true if grading was successful')"
}</pre>
<h2>diggrplus_get_competence_profile_statistic</h2>
<div>Get competence statistic for profile</div>
<div>type: read</div>
Params: <table>
<tr>
<td>userid</td>
<td>int</td>
<td>null</td>
<td>optional</td>
<td>default: int(0)
</td>
<td></td>
<td></td>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>optional</td>
<td>default: int(0)
</td>
<td></td>
<td></td>
</table>
Returns:<pre>{
    "items_and_examples_total": "int null ('number of free items + examples')",
    "items_and_examples_completed": "int null ('number of solved items, those items can be free or related to an example')",
    "competencies_total": "int null",
    "competencies_gained": "int null",
    "competencetree": [
        {
            "id": "int null ('id of subject')",
            "title": "text null ('title of subject')",
            "courseid": "int null ('id of course')",
            "courseshortname": "text null ('courseshortname')",
            "coursefullname": "text null ('coursefullname')",
            "teacherevaluation": "int null ('teacher evaluation of subject')",
            "studentevaluation": "int null ('student evaluation of subject')",
            "topics": [
                {
                    "id": "int null ('id of example')",
                    "title": "text null ('title of topic')",
                    "teacherevaluation": "int null ('teacher evaluation of topic')",
                    "studentevaluation": "int null ('student evaluation of topic')",
                    "descriptors": [
                        {
                            "id": "int null ('id of example')",
                            "title": "text null ('title of descriptor')",
                            "teacherevaluation": "int null ('teacher evaluation of descriptor')",
                            "studentevaluation": "int null ('student evaluation of descriptor')",
                            "childdescriptors": [
                                {
                                    "id": "int null ('id of example')",
                                    "title": "text null ('title of example')",
                                    "teacherevaluation": "int null ('teacher evaluation of childdescriptor')",
                                    "studentevaluation": "int null ('student evaluation of childdescriptor')"
                                },
                                "..."
                            ]
                        },
                        "..."
                    ]
                },
                "..."
            ]
        },
        "..."
    ]
}</pre>
<h2>diggrplus_get_descriptors_for_example</h2>
<div>get descriptors where example is associated
Get descriptors for example</div>
<div>type: read</div>
Params: <table>
<tr>
<td>exampleid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of example</td>
<td></td>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of course</td>
<td></td>
<tr>
<td>userid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of user</td>
<td></td>
<tr>
<td>forall</td>
<td>bool</td>
<td>null</td>
<td>required</td>
<td></td>
<td>for all users = true, for one user = false</td>
<td></td>
<tr>
<td>mindvisibility</td>
<td>bool</td>
<td>null</td>
<td>required</td>
<td></td>
<td>if a teacher wants to see the descriptors of an example in a hidden descriptor: set this to FALSE</td>
<td></td>
</table>
Returns:<pre>[
    {
        "descriptorid": "int null ('id of descriptor')",
        "title": "text null ('title of descriptor')",
        "teacherevaluation": "int null ('evaluation of descriptor')",
        "studentevaluation": "int null ('student evaluation of descriptor')",
        "evalniveauid": "int null ('evaluation niveau id')",
        "niveauid": "int null ('id of niveau')",
        "additionalinfo": "float null ('additional grading for descriptor')",
        "topicid": "int null ('id of topic')",
        "numbering": "text null ('descriptor numbering')",
        "child": "bool null ('true: child, false: parent')",
        "parentid": "int null ('parentid if child, 0 otherwise')",
        "gradingisold": "bool null ('true when there are newer gradings in the childcompetences')",
        "reviewerid": "int null ('id of reviewer')",
        "reviewername": "text null ('name of reviewer')"
    },
    "..."
]</pre>
<h2>dakora_grade_example</h2>
<div>grade example solution
Add student submission to example.</div>
<div>type: write</div>
Params: <table>
<tr>
<td>userid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>userid</td>
<td></td>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>courseid</td>
<td></td>
<tr>
<td>exampleid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>exampleid</td>
<td></td>
<tr>
<td>examplevalue</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>examplevalue</td>
<td></td>
<tr>
<td>additionalinfo</td>
<td>float</td>
<td>null</td>
<td>required</td>
<td></td>
<td>additionalInfo</td>
<td></td>
<tr>
<td>exampleevalniveauid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>example evaluation niveau id</td>
<td></td>
<tr>
<td>itemid</td>
<td>int</td>
<td>null</td>
<td>optional</td>
<td>default: int(-1)
</td>
<td>itemid</td>
<td></td>
<tr>
<td>comment</td>
<td>text</td>
<td>null</td>
<td>optional</td>
<td>default: string(0) ""
</td>
<td>comment</td>
<td></td>
<tr>
<td>url</td>
<td>url</td>
<td>null</td>
<td>optional</td>
<td>default: string(0) ""
</td>
<td>url</td>
<td></td>
<tr>
<td>filename</td>
<td>text</td>
<td>null</td>
<td>optional</td>
<td>default: string(0) ""
</td>
<td>filename, used to look up file and create a new one in the exaport comment file area</td>
<td></td>
<tr>
<td>fileitemid</td>
<td>text</td>
<td>null</td>
<td>optional</td>
<td>default: string(0) ""
</td>
<td>fileitemid</td>
<td></td>
</table>
Returns:<pre>{
    "success": "bool null ('status')",
    "exampleid": "int null ('exampleid')"
}</pre>
<h2>dakora_get_descriptors_details</h2>
<div>get descriptor details incl. grading and children for many descriptors</div>
<div>type: read</div>
Params: <table>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>courseid</td>
<td></td>
<tr>
<td>descriptorids</td>
<td>text</td>
<td>null</td>
<td>required</td>
<td></td>
<td>list of descriptors, seperated by comma</td>
<td></td>
<tr>
<td>userid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>userid</td>
<td></td>
<tr>
<td>forall</td>
<td>bool</td>
<td>null</td>
<td>required</td>
<td></td>
<td>forall</td>
<td></td>
<tr>
<td>crosssubjid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>crosssubjid</td>
<td></td>
</table>
Returns:<pre>[
    {
        "reviewerid": "int null ('id of reviewer')",
        "reviewername": "text null ('name of reviewer')",
        "descriptorid": "int null ('id of descriptor')",
        "parentid": "int null ('id of parent of descriptor')",
        "descriptortitle": "text null ('title of descriptor')",
        "teacherevaluation": "int null ('teacher evaluation of descriptor')",
        "studentevaluation": "int null ('student evaluation of descriptor')",
        "additionalinfo": "float null ('additional grading for descriptor')",
        "timestampteacher": "int null ('timestamp for teacher evaluation')",
        "timestampstudent": "int null ('timestamp for student evaluation')",
        "evalniveauid": "int null ('evaluation niveau id')",
        "numbering": "text null ('numbering')",
        "categories": "text null ('descriptor categories seperated by comma')",
        "niveauid": "int null ('id of niveau')",
        "niveautitle": "text null ('title of niveau')",
        "gradingisold": "bool null ('true when there are newer gradings in the childcompetences')",
        "globalgradings": "raw null ('Globalgradings as text')",
        "gradinghistory": "raw null ('Gradinghistory as text')",
        "hasmaterial": "bool null ('true or false if descriptor has material')",
        "children": [
            {
                "reviewerid": "int null ('id of reviewer')",
                "reviewername": "text null ('name of reviewer')",
                "descriptorid": "int null ('id of descriptor')",
                "parentid": "int null ('id of parent of descriptor')",
                "descriptortitle": "text null ('title of descriptor')",
                "teacherevaluation": "int null ('teacher evaluation of descriptor')",
                "additionalinfo": "float null ('additional grading for descriptor')",
                "evalniveauid": "int null ('evaluation niveau id')",
                "timestampteacher": "int null ('timestamp of teacher evaluation')",
                "studentevaluation": "int null ('student evaluation of descriptor')",
                "timestampstudent": "int null ('timestamp of student evaluation')",
                "numbering": "text null ('numbering')",
                "globalgradings": "raw null ('Globalgradings as text')",
                "gradinghistory": "raw null ('Gradinghistory as text')",
                "hasmaterial": "bool null ('true or false if descriptor has material')",
                "examples": [
                    {
                        "exampleid": "int null ('id of example')",
                        "exampletitle": "text null ('title of example')",
                        "examplestate": "int null ('state of example, always 0 if for all students')",
                        "visible": "int null ('visibility of example in current context')",
                        "used": "int null ('used in current context')",
                        "teacherevaluation": "int null ('example evaluation of teacher')",
                        "studentevaluation": "int null ('example evaluation of student')",
                        "timestampteacher": "int null ('timestamp of teacher evaluation')",
                        "timestampstudent": "int null ('timestamp of student evaluation')",
                        "evalniveauid": "int null ('evaluation niveau id')",
                        "solution_visible": "bool null ('visibility for example solution in current context')",
                        "exampletaxonomies": "text null ('taxonomies seperated by comma')",
                        "exampletaxids": "text null ('taxids seperated by comma')",
                        "examplecreatorid": "int null ('id of the creator of this example')",
                        "additionalinfo": "float null ('additional grading')",
                        "resubmission": "bool null ('resubmission is allowed\/not allowed')",
                        "is_teacherexample": "bool null ('is a teacher example?')"
                    },
                    "..."
                ],
                "examplestotal": "int null ('total number of material')",
                "examplesvisible": "int null ('visible number of material')",
                "examplesinwork": "int null ('number of material in work')",
                "visible": "int null ('visibility of children in current context')",
                "used": "int null ('used in current context')",
                "examplesedited": "int null ('number of edited material')",
                "examplegradings": {
                    "teacher": [
                        {
                            "evalniveauid": "int null ('niveau id to according number')",
                            "value": "int null ('grading value')",
                            "sum": "int null ('number of gradings')"
                        },
                        "..."
                    ],
                    "student": [
                        {
                            "sum": "int null ('number of gradings')"
                        },
                        "..."
                    ]
                }
            },
            "..."
        ],
        "childrengradings": {
            "teacher": [
                {
                    "evalniveauid": "int null ('niveau id to according number')",
                    "value": "int null ('grading value')",
                    "sum": "int null ('number of gradings')"
                },
                "..."
            ],
            "student": [
                {
                    "sum": "int null ('number of gradings')"
                },
                "..."
            ]
        },
        "examples": [
            {
                "exampleid": "int null ('id of example')",
                "exampletitle": "text null ('title of example')",
                "examplestate": "int null ('state of example, always 0 if for all students')",
                "visible": "int null ('visibility of example in current context')",
                "used": "int null ('used in current context')",
                "teacherevaluation": "int null ('example evaluation of teacher')",
                "studentevaluation": "int null ('example evaluation of student')",
                "evalniveauid": "int null ('evaluation niveau id')",
                "timestampteacher": "int null ('timestamp of teacher evaluation')",
                "timestampstudent": "int null ('timestamp of student evaluation')",
                "solution_visible": "bool null ('visibility for example solution in current context')",
                "exampletaxonomies": "text null ('taxonomies seperated by comma')",
                "exampletaxids": "text null ('taxids seperated by comma')",
                "examplecreatorid": "int null ('id of the creator of this example')",
                "additionalinfo": "float null ('additional grading')",
                "resubmission": "bool null ('resubmission is allowed\/not allowed')",
                "is_teacherexample": "bool null ('is a teacher example?')"
            },
            "..."
        ],
        "examplestotal": "int null ('total number of material')",
        "examplesvisible": "int null ('visible number of material')",
        "examplesinwork": "int null ('number of material in work')",
        "examplesedited": "int null ('number of edited material')",
        "examplegradings": {
            "teacher": [
                {
                    "evalniveauid": "int null ('niveau id to according number')",
                    "value": "int null ('grading value')",
                    "sum": "int null ('number of gradings')"
                },
                "..."
            ],
            "student": [
                {
                    "sum": "int null ('number of gradings')"
                },
                "..."
            ]
        },
        "visible": "int null ('visibility of example in current context')",
        "used": "int null ('used in current context')"
    },
    "..."
]</pre>
<h2>dakora_get_descriptor_details</h2>
<div>get descriptor details incl. grading and children</div>
<div>type: read</div>
Params: <table>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>courseid</td>
<td></td>
<tr>
<td>descriptorid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>descriptorid</td>
<td></td>
<tr>
<td>userid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>userid</td>
<td></td>
<tr>
<td>forall</td>
<td>bool</td>
<td>null</td>
<td>required</td>
<td></td>
<td>forall</td>
<td></td>
<tr>
<td>crosssubjid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>crosssubjid</td>
<td></td>
</table>
Returns:<pre>{
    "reviewerid": "int null ('id of reviewer')",
    "reviewername": "text null ('name of reviewer')",
    "descriptorid": "int null ('id of descriptor')",
    "parentid": "int null ('id of parent of descriptor')",
    "descriptortitle": "text null ('title of descriptor')",
    "teacherevaluation": "int null ('teacher evaluation of descriptor')",
    "studentevaluation": "int null ('student evaluation of descriptor')",
    "additionalinfo": "float null ('additional grading for descriptor')",
    "timestampteacher": "int null ('timestamp for teacher evaluation')",
    "timestampstudent": "int null ('timestamp for student evaluation')",
    "evalniveauid": "int null ('evaluation niveau id')",
    "numbering": "text null ('numbering')",
    "categories": "text null ('descriptor categories seperated by comma')",
    "niveauid": "int null ('id of niveau')",
    "niveautitle": "text null ('title of niveau')",
    "gradingisold": "bool null ('true when there are newer gradings in the childcompetences')",
    "hasmaterial": "bool null ('true or false if descriptor has material')",
    "children": [
        {
            "reviewerid": "int null ('id of reviewer')",
            "reviewername": "text null ('name of reviewer')",
            "descriptorid": "int null ('id of descriptor')",
            "parentid": "int null ('id of parent of descriptor')",
            "descriptortitle": "text null ('title of descriptor')",
            "teacherevaluation": "int null ('teacher evaluation of descriptor')",
            "additionalinfo": "float null ('additional grading for descriptor')",
            "evalniveauid": "int null ('evaluation niveau id')",
            "timestampteacher": "int null ('timestamp of teacher evaluation')",
            "studentevaluation": "int null ('student evaluation of descriptor')",
            "timestampstudent": "int null ('timestamp of student evaluation')",
            "numbering": "text null ('numbering')",
            "hasmaterial": "bool null ('true or false if descriptor has material')",
            "globalgradings": "raw null ('Globalgradings as text')",
            "gradinghistory": "raw null ('Gradinghistory as text')",
            "examples": [
                {
                    "exampleid": "int null ('id of example')",
                    "exampletitle": "raw null ('title of example')",
                    "examplestate": "int null ('state of example, always 0 if for all students')",
                    "visible": "int null ('visibility of example in current context')",
                    "used": "int null ('used in current context')",
                    "teacherevaluation": "int null ('example evaluation of teacher')",
                    "studentevaluation": "int null ('example evaluation of student')",
                    "timestampteacher": "int null ('timestamp of teacher evaluation')",
                    "timestampstudent": "int null ('timestamp of student evaluation')",
                    "evalniveauid": "int null ('evaluation niveau id')",
                    "solution_visible": "bool null ('visibility for example solution in current context')",
                    "exampletaxonomies": "text null ('taxonomies seperated by comma')",
                    "exampletaxids": "text null ('taxids seperated by comma')",
                    "examplecreatorid": "int null ('id of the creator of this example')",
                    "additionalinfo": "float null ('additional grading')",
                    "resubmission": "bool null ('resubmission is allowed\/not allowed')",
                    "is_teacherexample": "bool null ('is a teacher example?')"
                },
                "..."
            ],
            "examplestotal": "int null ('total number of material')",
            "examplesvisible": "int null ('visible number of material')",
            "examplesinwork": "int null ('number of material in work')",
            "visible": "int null ('visibility of children in current context')",
            "used": "int null ('used in current context')",
            "examplesedited": "int null ('number of edited material')",
            "examplegradings": {
                "teacher": [
                    {
                        "evalniveauid": "int null ('niveau id to according number')",
                        "value": "int null ('grading value')",
                        "sum": "int null ('number of gradings')"
                    },
                    "..."
                ],
                "student": [
                    {
                        "sum": "int null ('number of gradings')"
                    },
                    "..."
                ]
            }
        },
        "..."
    ],
    "childrengradings": {
        "teacher": [
            {
                "evalniveauid": "int null ('niveau id to according number')",
                "value": "int null ('grading value')",
                "sum": "int null ('number of gradings')"
            },
            "..."
        ],
        "student": [
            {
                "sum": "int null ('number of gradings')"
            },
            "..."
        ]
    },
    "examples": [
        {
            "exampleid": "int null ('id of example')",
            "exampletitle": "raw null ('title of example')",
            "examplestate": "int null ('state of example, always 0 if for all students')",
            "visible": "int null ('visibility of example in current context')",
            "used": "int null ('used in current context')",
            "teacherevaluation": "int null ('example evaluation of teacher')",
            "studentevaluation": "int null ('example evaluation of student')",
            "evalniveauid": "int null ('evaluation niveau id')",
            "timestampteacher": "int null ('timestamp of teacher evaluation')",
            "timestampstudent": "int null ('timestamp of student evaluation')",
            "solution_visible": "bool null ('visibility for example solution in current context')",
            "exampletaxonomies": "text null ('taxonomies seperated by comma')",
            "exampletaxids": "text null ('taxids seperated by comma')",
            "examplecreatorid": "int null ('id of the creator of this example')",
            "additionalinfo": "float null ('additional grading')",
            "resubmission": "bool null ('resubmission is allowed\/not allowed')",
            "is_teacherexample": "bool null ('is a teacher example?')"
        },
        "..."
    ],
    "examplestotal": "int null ('total number of material')",
    "examplesvisible": "int null ('visible number of material')",
    "examplesinwork": "int null ('number of material in work')",
    "examplesedited": "int null ('number of edited material')",
    "examplegradings": {
        "teacher": [
            {
                "evalniveauid": "int null ('niveau id to according number')",
                "value": "int null ('grading value')",
                "sum": "int null ('number of gradings')"
            },
            "..."
        ],
        "student": [
            {
                "sum": "int null ('number of gradings')"
            },
            "..."
        ]
    },
    "visible": "int null ('visibility of example in current context')",
    "used": "int null ('used in current context')",
    "globalgradings": "raw null ('Globalgradings as text')",
    "gradinghistory": "raw null ('Gradinghistory as text')"
}</pre>
<h2>dakora_get_example_information</h2>
<div>get information and submission for example
get example with all submission details and gradings</div>
<div>type: read</div>
Params: <table>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of course</td>
<td></td>
<tr>
<td>userid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of user</td>
<td></td>
<tr>
<td>exampleid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of example</td>
<td></td>
</table>
Returns:<pre>{
    "itemid": "int null ('id of item')",
    "status": "int null ('status of the submission (-1 == no submission; 0 == not graded; 1 == graded')",
    "name": "text null ('title of item')",
    "type": "text null ('type of item (note,file,link)')",
    "url": "text null ('url')",
    "teachervalue": "int null ('teacher grading')",
    "teacherevaluation": "int null ('teacher grading (double of teachervalue?)')",
    "studentvalue": "int null ('student grading')",
    "evalniveauid": "int null ('evaluation niveau id')",
    "timestampteacher": "int null ('timestamp for teacher evaluation')",
    "timestampstudent": "int null ('timestamp for student evaluation')",
    "teachercomment": "text null ('teacher comment')",
    "teacherfile": {
        "filename": "text null ('title of item')",
        "file": "url null ('file url')",
        "mimetype": "text null ('mime type for file')",
        "fileindex": "text null ('mime type for file')"
    },
    "studentcomment": "text null ('student comment')",
    "teacheritemvalue": "int null ('item teacher grading')",
    "resubmission": "bool null ('resubmission is allowed\/not allowed')",
    "additionalinfo": "float null ('additional grading')",
    "studentfiles": [
        {
            "filename": "text null ('title of item')",
            "file": "url null ('file url')",
            "mimetype": "text null ('mime type for file')",
            "fileindex": "text null ('mime type for file')"
        },
        "..."
    ],
    "activityid": "int null ('activityid')",
    "activitytitle": "text null ('activity title')",
    "activitytype": "text null ('activity type - key for activity icons in Dakora')"
}</pre>
<h2>dakora_get_user_information</h2>
<div>get information about current user
get example with all submission details and gradings</div>
<div>type: read</div>
Params: <table>
</table>
Returns:<pre>{
    "id": "int null ('ID of the user')",
    "username": "raw null ('The username')",
    "firstname": "notags null ('The first name(s) of the user')",
    "lastname": "notags null ('The family name of the user')",
    "fullname": "notags null ('The fullname of the user')",
    "email": "text null ('An email address - allow email as root@localhost')",
    "firstaccess": "int null ('first access to the site (0 if never)')",
    "lastaccess": "int null ('last access to the site (0 if never)')",
    "auth": "plugin null ('Auth plugins include manual, ldap, imap, etc')",
    "confirmed": "int null ('Active user: 1 if confirmed, 0 otherwise')",
    "lang": "safedir null ('Language code such as \"en\", must exist on server')",
    "url": "url null ('URL of the user')",
    "profileimageurlsmall": "url null ('User image profile URL - small version')",
    "profileimageurl": "url null ('User image profile URL - big version')",
    "exarole": "int null ('1=trainer, 2=student')"
}</pre>
<h2>dakora_get_lang_information</h2>
<div>Returns lang information from exacomp</div>
<div>type: read</div>
Params: <table>
<tr>
<td>lang</td>
<td>text</td>
<td>null</td>
<td>required</td>
<td></td>
<td>language</td>
<td></td>
</table>
Returns:<pre>[
    {
        "stringid": "text null ('key for the lang string')",
        "master": "text null ('lang string in the chosen language')"
    },
    "..."
]</pre>
<h2>dakora_create_blocking_event</h2>
<div>create a blocking event
Create a new blocking event</div>
<div>type: write</div>
Params: <table>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of course</td>
<td></td>
<tr>
<td>title</td>
<td>text</td>
<td>null</td>
<td>required</td>
<td></td>
<td>title of new blocking event</td>
<td></td>
<tr>
<td>description</td>
<td>text</td>
<td>null</td>
<td>required</td>
<td></td>
<td>description of new blocking event</td>
<td></td>
<tr>
<td>timeframe</td>
<td>text</td>
<td>null</td>
<td>required</td>
<td></td>
<td>timeframe</td>
<td></td>
<tr>
<td>externalurl</td>
<td>url</td>
<td>null</td>
<td>required</td>
<td></td>
<td>external url</td>
<td></td>
<tr>
<td>userid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of user</td>
<td></td>
<tr>
<td>preplanningstorage</td>
<td>bool</td>
<td>null</td>
<td>required</td>
<td></td>
<td>in pre planning storage or for specific student</td>
<td></td>
</table>
Returns:<pre>{
    "success": "bool null ('status')"
}</pre>
<h2>dakora_get_examples_by_descriptor_and_grading</h2>
<div>returns examples for given descriptor and grading
Create a new blocking event</div>
<div>type: read</div>
Params: <table>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of course</td>
<td></td>
<tr>
<td>userid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of user</td>
<td></td>
<tr>
<td>descriptorid</td>
<td>text</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of descriptor</td>
<td></td>
<tr>
<td>grading</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>grading value</td>
<td></td>
</table>
Returns:<pre>[
    {
        "exampleid": "int null ('id of topic')",
        "exampletitle": "text null ('title of topic')"
    },
    "..."
]</pre>
<h2>dakora_allow_example_resubmission</h2>
<div>allow student to resubmit example
Create a new blocking event</div>
<div>type: read</div>
Params: <table>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of course</td>
<td></td>
<tr>
<td>userid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of user</td>
<td></td>
<tr>
<td>exampleid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of example</td>
<td></td>
</table>
Returns:<pre>{
    "success": "bool null ('status of success, either true (1) or false (0)')"
}</pre>
<h2>dakora_get_competence_grid_for_profile</h2>
<div>get grid for profile
Get competence grid for profile</div>
<div>type: read</div>
Params: <table>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of course</td>
<td></td>
<tr>
<td>userid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of user</td>
<td></td>
<tr>
<td>subjectid</td>
<td>int</td>
<td>null</td>
<td>optional</td>
<td>default: int(-1)
</td>
<td>id of subject</td>
<td></td>
<tr>
<td>crosssubjid</td>
<td>int</td>
<td>null</td>
<td>optional</td>
<td>default: int(-1)
</td>
<td>id of crosssubject</td>
<td></td>
</table>
Returns:<pre>{
    "teacher": {
        "crosssubjgrading": {
            "value": "float null ('evaluation')",
            "additionalinfo": "float null ('evaluation')",
            "evalniveauid": "float null ('evaluation')"
        },
        "gridgradings": [
            {
                "title": "text null ('title of table')",
                "rows": [
                    {
                        "columns": [
                            {
                                "text": "text null ('cell text')",
                                "evaluation": "float null ('evaluation')",
                                "evaluation_text": "text null ('evaluation text')",
                                "evaluation_mapped": "int null ('mapped evaluation')",
                                "evalniveauid": "int null ('evaluation niveau id')",
                                "show": "bool null ('show cell')",
                                "visible": "bool null ('cell visibility')",
                                "topicid": "int null ('topic id')",
                                "span": "int null ('colspan')",
                                "timestamp": "int null ('evaluation timestamp, 0 if not set')",
                                "gradingisold": "bool null ('true when there are childdescriptors with newer gradings than the parentdescriptor')"
                            },
                            "..."
                        ]
                    },
                    "..."
                ]
            },
            "..."
        ]
    },
    "student": {
        "crosssubjgrading": {
            "value": "float null ('evaluation')",
            "additionalinfo": "float null ('evaluation')",
            "evalniveauid": "float null ('evaluation')"
        },
        "gridgradings": [
            {
                "title": "text null ('title of table')",
                "rows": [
                    {
                        "columns": [
                            {
                                "text": "text null ('cell text')",
                                "evaluation": "float null ('evaluation')",
                                "evaluation_text": "text null ('evaluation text')",
                                "evaluation_mapped": "int null ('mapped evaluation')",
                                "evalniveauid": "int null ('evaluation niveau id')",
                                "show": "bool null ('show cell')",
                                "visible": "bool null ('cell visibility')",
                                "topicid": "int null ('topic id')",
                                "span": "int null ('colspan')",
                                "timestamp": "int null ('evaluation timestamp, 0 if not set')",
                                "gradingisold": "bool null ('true when there are childdescriptors with newer gradings than the parentdescriptor')"
                            },
                            "..."
                        ]
                    },
                    "..."
                ]
            },
            "..."
        ]
    },
    "globalcompetences": [
        {
            "title": "text null ('title of table')",
            "rows": [
                {
                    "columns": [
                        {
                            "text": "text null ('cell text')",
                            "evaluation": "float null ('evaluation')",
                            "evaluation_text": "text null ('evaluation text')",
                            "evaluation_mapped": "int null ('mapped evaluation')",
                            "evalniveauid": "int null ('evaluation niveau id')",
                            "show": "bool null ('show cell')",
                            "visible": "bool null ('cell visibility')",
                            "topicid": "int null ('topic id')",
                            "span": "int null ('colspan')",
                            "timestamp": "int null ('evaluation timestamp, 0 if not set')",
                            "gradingisold": "bool null ('true when there are childdescriptors with newer gradings than the parentdescriptor')"
                        },
                        "..."
                    ]
                },
                "..."
            ]
        },
        "..."
    ]
}</pre>
<h2>dakora_get_competence_profile_statistic</h2>
<div>get statistic in user and subject context
Get competence statistic for profile</div>
<div>type: read</div>
Params: <table>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of course</td>
<td></td>
<tr>
<td>userid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of user</td>
<td></td>
<tr>
<td>subjectid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of subject</td>
<td></td>
<tr>
<td>start_timestamp</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>start timestamp for evaluation range</td>
<td></td>
<tr>
<td>end_timestamp</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>end timestamp for evaluation range</td>
<td></td>
</table>
Returns:<pre>{
    "descriptor_evaluations": {
        "niveaus": [
            {
                "id": "int null ('evalniveauid')",
                "evaluations": [
                    {
                        "value": "int null ('value of evaluation')",
                        "sum": "int null ('sum of evaluations of current gradings')"
                    },
                    "..."
                ]
            },
            "..."
        ],
        "descriptorsToGain": "int null ('maximum number of descripotrs\/competencies one can gain')"
    }
}</pre>
<h2>dakora_get_competence_profile_comparison</h2>
<div>get list for student and teacher comparison
Get competence comparison for profile</div>
<div>type: read</div>
Params: <table>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of course</td>
<td></td>
<tr>
<td>userid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of user</td>
<td></td>
<tr>
<td>topicid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of subject</td>
<td></td>
</table>
Returns:<pre>{
    "descriptors": [
        {
            "descriptorid": "int null ('descriptorid')",
            "title": "text null ('title of descriptor')",
            "numbering": "text null ('descriptor numbering')",
            "teacherevaluation": "int null ('teacher evaluation')",
            "additionalinfo": "float null ('additional grading of descriptor')",
            "evalniveauid": "int null ('teacher evaluation niveau id')",
            "niveauid": "int null ('niveau id (ger: lfs)')",
            "timestampteacher": "int null ('timestamp for teacher descriptor evaluation')",
            "studentevaluation": "int null ('student evaluation')",
            "timestampstudent": "int null ('timestamp for student descriptor evaluation')",
            "examples": [
                {
                    "example": "bool null ('indicates if sub is example or grouping statement')",
                    "exampleid": "int null ('id of example')",
                    "title": "text null ('title of sub')",
                    "teacherevaluation": "int null ('teacher evaluation')",
                    "evalniveauid": "int null ('teacher evaluation niveau id')",
                    "timestampteacher": "int null ('timestamp for teacher example evaluation')",
                    "studentevaluation": "int null ('student evaluation')",
                    "timestampstudent": "int null ('timestamp for student example evaluation')"
                },
                "..."
            ]
        },
        "..."
    ]
}</pre>
<h2>dakora_get_competence_profile_topic_statistic</h2>
<div>get data for 3D graph
Get competence statistic for topic in profile for 3D graph</div>
<div>type: read</div>
Params: <table>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of course</td>
<td></td>
<tr>
<td>userid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of user</td>
<td></td>
<tr>
<td>topicid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of subject</td>
<td></td>
<tr>
<td>start_timestamp</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>start timestamp for evaluation range</td>
<td></td>
<tr>
<td>end_timestamp</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>end timestamp for evaluation range</td>
<td></td>
</table>
Returns:<pre>{
    "descriptor_evaluation": {
        "niveaus": [
            {
                "title": "text null ('evalniveauid')",
                "teacherevaluation": "int null ('evaluation value of current lfs')",
                "evalniveauid": "int null ('evaluation niveau id')",
                "studentevaluation": "int null ('student evaluation')"
            },
            "..."
        ]
    }
}</pre>
<h2>block_exacomp_is_elove_student_self_assessment_enabled</h2>
<div>check the corresponding config setting</div>
<div>type: read</div>
Params: <table>
</table>
Returns:<pre>{
    "enabled": "bool null"
}</pre>
<h2>dakora_get_site_policies</h2>
<div></div>
<div>type: read</div>
Params: <table>
</table>
Returns:<pre>[
    {
        "name": "text null ('name')",
        "summary": "text null ('summary')",
        "content": "text null ('content')"
    },
    "..."
]</pre>
<h2>block_exacomp_diggr_create_cohort</h2>
<div>Create one or more cohorts</div>
<div>type: write</div>
Params: <table>
<tr>
<td>name</td>
<td>raw</td>
<td>null</td>
<td>required</td>
<td></td>
<td>cohort name</td>
<td></td>
<tr>
<td>skz</td>
<td>raw</td>
<td>null</td>
<td>required</td>
<td></td>
<td>school number</td>
<td></td>
</table>
Returns:<pre>{
    "cohortcode": "raw null ('cohortcode')"
}</pre>
<h2>block_exacomp_diggr_get_students_of_cohort</h2>
<div>Create one or more cohorts</div>
<div>type: read</div>
Params: <table>
<tr>
<td>cohortid</td>
<td>raw</td>
<td>null</td>
<td>required</td>
<td></td>
<td>cohort id</td>
<td></td>
</table>
Returns:<pre>{
    "cohortid": "int null ('id of cohort')",
    "cohortcode": "text null ('code of cohort')",
    "students": [
        {
            "userid": "int null ('id of student')",
            "name": "text null ('name of student')"
        },
        "..."
    ]
}</pre>
<h2>block_exacomp_diggr_get_cohorts_of_trainer</h2>
<div>Create one or more cohorts</div>
<div>type: read</div>
Params: <table>
</table>
Returns:<pre>{
    "cohorts": [
        {
            "cohortid": "int null ('id of cohort')",
            "name": "text null ('name of user')",
            "cohortcode": "text null ('code of cohort')"
        },
        "..."
    ]
}</pre>
<h2>dakora_get_evaluation_config</h2>
<div>get evaluation configuration
get admin evaluation configurations</div>
<div>type: read</div>
Params: <table>
</table>
Returns:<pre>{
    "use_evalniveau": "bool null ('use evaluation niveaus')",
    "evalniveaus": {
        "1": "text null ('evaluation title for id = 1')",
        "2": "text null ('evaluation title for id = 2')",
        "3": "text null ('evaluation title for id = 3')"
    },
    "values": [
        "text null ('value title for id = 0')",
        "text null ('value title for id = 1')",
        "text null ('value title for id = 2')",
        "text null ('value title for id = 3')"
    ]
}</pre>
<h2>dakora_get_config</h2>
<div></div>
<div>type: read</div>
Params: <table>
</table>
Returns:<pre>{
    "points_limit": "int null ('points_limit')",
    "grade_limit": "int null ('grade_limit')",
    "points_negative_threshold": "int null ('points_negative_threshold. Values below this value are negative')",
    "grade_negative_threshold": "int null ('grade_negative_threshold. Values below this value are negative')",
    "verbal_negative_threshold": "int null ('grade_negative_threshold. Values below this value are negative')",
    "example_scheme": "int null ('example_scheme')",
    "example_diffLevel": "bool null ('example_diffLevel')",
    "example_SelfEval": "bool null ('example_SelfEval')",
    "childcomp_scheme": "int null ('childcomp_scheme')",
    "childcomp_diffLevel": "bool null ('childcomp_diffLevel')",
    "childcomp_SelfEval": "bool null ('childcomp_SelfEval')",
    "comp_scheme": "int null ('comp_scheme')",
    "comp_diffLevel": "bool null ('comp_diffLevel')",
    "comp_SelfEval": "bool null ('comp_SelfEval')",
    "topic_scheme": "int null ('topic_scheme')",
    "topic_diffLevel": "bool null ('topic_diffLevel')",
    "topic_SelfEval": "bool null ('topic_SelfEval')",
    "subject_scheme": "int null ('subject_scheme')",
    "subject_diffLevel": "bool null ('subject_diffLevel')",
    "subject_SelfEval": "bool null ('subject_SelfEval')",
    "theme_scheme": "int null ('theme_scheme')",
    "theme_diffLevel": "bool null ('theme_diffLevel')",
    "theme_SelfEval": "bool null ('theme_SelfEval')",
    "use_evalniveau": "bool null ('use evaluation niveaus')",
    "evalniveaus": [
        {
            "id": "int null ('id')",
            "name": "text null ('name')"
        },
        "..."
    ],
    "teacherevalitems": [
        {
            "id": "int null ('id')",
            "name": "text null ('name')"
        },
        "..."
    ],
    "teacherevalitems_short": [
        {
            "id": "int null ('id')",
            "name": "text null ('name')"
        },
        "..."
    ],
    "studentevalitems": [
        {
            "id": "int null ('id')",
            "name": "text null ('name')"
        },
        "..."
    ],
    "studentevalitems_short": [
        {
            "id": "int null ('id')",
            "name": "text null ('name')"
        },
        "..."
    ],
    "studentevalitems_examples": [
        {
            "id": "int null ('id')",
            "name": "text null ('name')"
        },
        "..."
    ],
    "studentevalitems_examples_short": [
        {
            "id": "int null ('id')",
            "name": "text null ('name')"
        },
        "..."
    ],
    "gradingperiods": [
        {
            "id": "int null ('id')",
            "description": "text null ('name')",
            "starttime": "int null ('active from')",
            "endtime": "int null ('active to')"
        },
        "... grading periods from exastud ..."
    ],
    "taxonomies": [
        {
            "id": "int null ('id')",
            "title": "text null ('name')",
            "source": "text null ('source')"
        },
        "... values ..."
    ],
    "version": "float null ('exacomp version number in YYYYMMDDXX format')",
    "moodleversion": "float null ('moodle version number in YYYYMMDDXX format')",
    "release": "text null ('plugin release x.x.x format')",
    "exaportactive": "bool null ('flag if exaportfolio should be active')",
    "customlanguagefile": "text null ('customlanguagefiel')",
    "timeout": "int null ('a timeout timer')",
    "show_overview": "bool null ('flag if \"show overview\" is active')",
    "show_eportfolio": "bool null ('flag if \"show ePortfolio\" is active')",
    "categories": [
        {
            "id": "int null ('id')",
            "title": "text null ('name')",
            "source": "text null ('source')"
        },
        "... values ..."
    ]
}</pre>
<h2>dakora_get_courseconfigs</h2>
<div></div>
<div>type: read</div>
Params: <table>
</table>
Returns:<pre>{
    "courses": [
        {
            "courseid": "int null ('id of course')",
            "fullname": "text null ('fullname of course')",
            "assessment_config": "raw null ('which course specific assessment_config is used')"
        },
        "..."
    ],
    "configs": [
        {
            "points_limit": "int null ('points_limit')",
            "grade_limit": "int null ('grade_limit')",
            "points_negative_threshold": "int null ('points_negative_threshold. Values below this value are negative')",
            "grade_negative_threshold": "int null ('grade_negative_threshold. Values below this value are negative')",
            "verbal_negative_threshold": "int null ('grade_negative_threshold. Values below this value are negative')",
            "example_scheme": "int null ('example_scheme')",
            "example_diffLevel": "bool null ('example_diffLevel')",
            "example_SelfEval": "bool null ('example_SelfEval')",
            "childcomp_scheme": "int null ('childcomp_scheme')",
            "childcomp_diffLevel": "bool null ('childcomp_diffLevel')",
            "childcomp_SelfEval": "bool null ('childcomp_SelfEval')",
            "comp_scheme": "int null ('comp_scheme')",
            "comp_diffLevel": "bool null ('comp_diffLevel')",
            "comp_SelfEval": "bool null ('comp_SelfEval')",
            "topic_scheme": "int null ('topic_scheme')",
            "topic_diffLevel": "bool null ('topic_diffLevel')",
            "topic_SelfEval": "bool null ('topic_SelfEval')",
            "subject_scheme": "int null ('subject_scheme')",
            "subject_diffLevel": "bool null ('subject_diffLevel')",
            "subject_SelfEval": "bool null ('subject_SelfEval')",
            "theme_scheme": "int null ('theme_scheme')",
            "theme_diffLevel": "bool null ('theme_diffLevel')",
            "theme_SelfEval": "bool null ('theme_SelfEval')",
            "use_evalniveau": "bool null ('use evaluation niveaus')",
            "evalniveaus": [
                {
                    "id": "int null ('id')",
                    "name": "text null ('name')"
                },
                "..."
            ],
            "teacherevalitems": [
                {
                    "id": "int null ('id')",
                    "name": "text null ('name')"
                },
                "..."
            ],
            "teacherevalitems_short": [
                {
                    "id": "int null ('id')",
                    "name": "text null ('name')"
                },
                "..."
            ],
            "studentevalitems": [
                {
                    "id": "int null ('id')",
                    "name": "text null ('name')"
                },
                "..."
            ],
            "studentevalitems_short": [
                {
                    "id": "int null ('id')",
                    "name": "text null ('name')"
                },
                "..."
            ],
            "studentevalitems_examples": [
                {
                    "id": "int null ('id')",
                    "name": "text null ('name')"
                },
                "..."
            ],
            "studentevalitems_examples_short": [
                {
                    "id": "int null ('id')",
                    "name": "text null ('name')"
                },
                "..."
            ],
            "gradingperiods": [
                {
                    "id": "int null ('id')",
                    "description": "text null ('name')",
                    "starttime": "int null ('active from')",
                    "endtime": "int null ('active to')"
                },
                "... grading periods from exastud ..."
            ],
            "taxonomies": [
                {
                    "id": "int null ('id')",
                    "title": "text null ('name')",
                    "source": "text null ('source')"
                },
                "... values ..."
            ],
            "version": "float null ('exacomp version number in YYYYMMDDXX format')",
            "moodleversion": "float null ('moodle version number in YYYYMMDDXX format')",
            "release": "text null ('plugin release x.x.x format')",
            "exaportactive": "bool null ('flag if exaportfolio should be active')",
            "customlanguagefile": "text null ('customlanguagefiel')",
            "timeout": "int null ('a timeout timer')",
            "show_overview": "bool null ('flag if \"show overview\" is active')",
            "show_eportfolio": "bool null ('flag if \"show ePortfolio\" is active')",
            "categories": [
                {
                    "id": "int null ('id')",
                    "title": "text null ('name')",
                    "source": "text null ('source')"
                },
                "... values ..."
            ]
        },
        "..."
    ]
}</pre>
<h2>block_exacomp_login</h2>
<div>webservice called through token.php</div>
<div>type: read</div>
Params: <table>
<tr>
<td>app</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>app accessing this service (eg. dakora)</td>
<td></td>
<tr>
<td>app_version</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>version of the app (eg. 4.6.0)</td>
<td></td>
<tr>
<td>services</td>
<td>int</td>
<td>null</td>
<td>optional</td>
<td>default: string(33) "moodle_mobile_app,exacompservices"
</td>
<td>wanted webservice tokens (eg. exacomp,exaport)</td>
<td></td>
</table>
Returns:<pre>{
    "user": {
        "id": "int null ('ID of the user')",
        "username": "raw null ('The username')",
        "firstname": "notags null ('The first name(s) of the user')",
        "lastname": "notags null ('The family name of the user')",
        "fullname": "notags null ('The fullname of the user')",
        "email": "text null ('An email address - allow email as root@localhost')",
        "firstaccess": "int null ('first access to the site (0 if never)')",
        "lastaccess": "int null ('last access to the site (0 if never)')",
        "auth": "plugin null ('Auth plugins include manual, ldap, imap, etc')",
        "confirmed": "int null ('Active user: 1 if confirmed, 0 otherwise')",
        "lang": "safedir null ('Language code such as \"en\", must exist on server')",
        "url": "url null ('URL of the user')",
        "profileimageurlsmall": "url null ('User image profile URL - small version')",
        "profileimageurl": "url null ('User image profile URL - big version')",
        "exarole": "int null ('1=trainer, 2=student')"
    },
    "exacompcourses": [
        {
            "courseid": "int null ('id of course')",
            "fullname": "text null ('fullname of course')",
            "shortname": "raw null ('shortname of course')",
            "exarole": "int null ('1=trainer, 2=student')",
            "teachercanedit": "bool null",
            "assessment_config": "raw null ('which course specific assessment_config is used')"
        },
        "..."
    ],
    "courseconfigs": {
        "courses": [
            {
                "courseid": "int null ('id of course')",
                "fullname": "text null ('fullname of course')",
                "assessment_config": "raw null ('which course specific assessment_config is used')"
            },
            "..."
        ],
        "configs": [
            {
                "points_limit": "int null ('points_limit')",
                "grade_limit": "int null ('grade_limit')",
                "points_negative_threshold": "int null ('points_negative_threshold. Values below this value are negative')",
                "grade_negative_threshold": "int null ('grade_negative_threshold. Values below this value are negative')",
                "verbal_negative_threshold": "int null ('grade_negative_threshold. Values below this value are negative')",
                "example_scheme": "int null ('example_scheme')",
                "example_diffLevel": "bool null ('example_diffLevel')",
                "example_SelfEval": "bool null ('example_SelfEval')",
                "childcomp_scheme": "int null ('childcomp_scheme')",
                "childcomp_diffLevel": "bool null ('childcomp_diffLevel')",
                "childcomp_SelfEval": "bool null ('childcomp_SelfEval')",
                "comp_scheme": "int null ('comp_scheme')",
                "comp_diffLevel": "bool null ('comp_diffLevel')",
                "comp_SelfEval": "bool null ('comp_SelfEval')",
                "topic_scheme": "int null ('topic_scheme')",
                "topic_diffLevel": "bool null ('topic_diffLevel')",
                "topic_SelfEval": "bool null ('topic_SelfEval')",
                "subject_scheme": "int null ('subject_scheme')",
                "subject_diffLevel": "bool null ('subject_diffLevel')",
                "subject_SelfEval": "bool null ('subject_SelfEval')",
                "theme_scheme": "int null ('theme_scheme')",
                "theme_diffLevel": "bool null ('theme_diffLevel')",
                "theme_SelfEval": "bool null ('theme_SelfEval')",
                "use_evalniveau": "bool null ('use evaluation niveaus')",
                "evalniveaus": [
                    {
                        "id": "int null ('id')",
                        "name": "text null ('name')"
                    },
                    "..."
                ],
                "teacherevalitems": [
                    {
                        "id": "int null ('id')",
                        "name": "text null ('name')"
                    },
                    "..."
                ],
                "teacherevalitems_short": [
                    {
                        "id": "int null ('id')",
                        "name": "text null ('name')"
                    },
                    "..."
                ],
                "studentevalitems": [
                    {
                        "id": "int null ('id')",
                        "name": "text null ('name')"
                    },
                    "..."
                ],
                "studentevalitems_short": [
                    {
                        "id": "int null ('id')",
                        "name": "text null ('name')"
                    },
                    "..."
                ],
                "studentevalitems_examples": [
                    {
                        "id": "int null ('id')",
                        "name": "text null ('name')"
                    },
                    "..."
                ],
                "studentevalitems_examples_short": [
                    {
                        "id": "int null ('id')",
                        "name": "text null ('name')"
                    },
                    "..."
                ],
                "gradingperiods": [
                    {
                        "id": "int null ('id')",
                        "description": "text null ('name')",
                        "starttime": "int null ('active from')",
                        "endtime": "int null ('active to')"
                    },
                    "... grading periods from exastud ..."
                ],
                "taxonomies": [
                    {
                        "id": "int null ('id')",
                        "title": "text null ('name')",
                        "source": "text null ('source')"
                    },
                    "... values ..."
                ],
                "version": "float null ('exacomp version number in YYYYMMDDXX format')",
                "moodleversion": "float null ('moodle version number in YYYYMMDDXX format')",
                "release": "text null ('plugin release x.x.x format')",
                "exaportactive": "bool null ('flag if exaportfolio should be active')",
                "customlanguagefile": "text null ('customlanguagefiel')",
                "timeout": "int null ('a timeout timer')",
                "show_overview": "bool null ('flag if \"show overview\" is active')",
                "show_eportfolio": "bool null ('flag if \"show ePortfolio\" is active')",
                "categories": [
                    {
                        "id": "int null ('id')",
                        "title": "text null ('name')",
                        "source": "text null ('source')"
                    },
                    "... values ..."
                ]
            },
            "..."
        ]
    },
    "tokens": [
        {
            "service": "text null ('name of service')",
            "token": "text null ('token of the service')"
        },
        "... requested tokens ..."
    ]
}</pre>
<h2>dakora_set_descriptor_visibility</h2>
<div>set visibility for descriptor</div>
<div>type: write</div>
Params: <table>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of course</td>
<td></td>
<tr>
<td>descriptorid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of descriptor</td>
<td></td>
<tr>
<td>userid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of user, 0 for current user</td>
<td></td>
<tr>
<td>forall</td>
<td>bool</td>
<td>null</td>
<td>required</td>
<td></td>
<td>for all users = true, for one user = false</td>
<td></td>
<tr>
<td>visible</td>
<td>bool</td>
<td>null</td>
<td>required</td>
<td></td>
<td>visibility for descriptor in current context</td>
<td></td>
</table>
Returns:<pre>{
    "success": "bool null ('status of success, either true (1) or false (0)')"
}</pre>
<h2>dakora_set_example_visibility</h2>
<div>set visibility for example</div>
<div>type: write</div>
Params: <table>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of course</td>
<td></td>
<tr>
<td>exampleid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of example</td>
<td></td>
<tr>
<td>userid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of user, 0 for current user</td>
<td></td>
<tr>
<td>forall</td>
<td>bool</td>
<td>null</td>
<td>required</td>
<td></td>
<td>for all users = true, for one user = false</td>
<td></td>
<tr>
<td>visible</td>
<td>bool</td>
<td>null</td>
<td>required</td>
<td></td>
<td>visibility for example in current context</td>
<td></td>
</table>
Returns:<pre>{
    "success": "bool null ('status of success, either true (1) or false (0)')"
}</pre>
<h2>dakora_set_topic_visibility</h2>
<div>set visibility for topic</div>
<div>type: write</div>
Params: <table>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of course</td>
<td></td>
<tr>
<td>topicid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of topic</td>
<td></td>
<tr>
<td>userid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of user, 0 for current user</td>
<td></td>
<tr>
<td>forall</td>
<td>bool</td>
<td>null</td>
<td>required</td>
<td></td>
<td>for all users = true, for one user = false</td>
<td></td>
<tr>
<td>visible</td>
<td>bool</td>
<td>null</td>
<td>required</td>
<td></td>
<td>visibility for topic in current context</td>
<td></td>
<tr>
<td>groupid</td>
<td>int</td>
<td>null</td>
<td>optional</td>
<td>default: int(-1)
</td>
<td>id of group</td>
<td></td>
</table>
Returns:<pre>{
    "success": "bool null ('status of success, either true (1) or false (0)')"
}</pre>
<h2>dakora_set_niveau_visibility</h2>
<div>set visibility for topic</div>
<div>type: write</div>
Params: <table>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of course</td>
<td></td>
<tr>
<td>topicid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of topic</td>
<td></td>
<tr>
<td>userid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of user, 0 for current user</td>
<td></td>
<tr>
<td>forall</td>
<td>bool</td>
<td>null</td>
<td>required</td>
<td></td>
<td>for all users = true, for one user = false</td>
<td></td>
<tr>
<td>visible</td>
<td>bool</td>
<td>null</td>
<td>required</td>
<td></td>
<td>visibility for topic in current context</td>
<td></td>
<tr>
<td>groupid</td>
<td>int</td>
<td>null</td>
<td>optional</td>
<td>default: int(-1)
</td>
<td>id of group</td>
<td></td>
<tr>
<td>niveauid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of the descriptorniveau</td>
<td></td>
</table>
Returns:<pre>{
    "success": "bool null ('status of success, either true (1) or false (0)')"
}</pre>
<h2>dakora_set_example_solution_visibility</h2>
<div>set visibility for example solutions</div>
<div>type: write</div>
Params: <table>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of course</td>
<td></td>
<tr>
<td>exampleid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of example</td>
<td></td>
<tr>
<td>userid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of user, 0 for current user</td>
<td></td>
<tr>
<td>forall</td>
<td>bool</td>
<td>null</td>
<td>required</td>
<td></td>
<td>for all users = true, for one user = false</td>
<td></td>
<tr>
<td>visible</td>
<td>bool</td>
<td>null</td>
<td>required</td>
<td></td>
<td>visibility for example in current context</td>
<td></td>
</table>
Returns:<pre>{
    "success": "bool null ('status of success, either true (1) or false (0)')"
}</pre>
<h2>diggrplus_set_descriptor_visibility</h2>
<div>set visibility for descriptor</div>
<div>type: write</div>
Params: <table>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of course</td>
<td></td>
<tr>
<td>ids</td>
<td>text</td>
<td>null</td>
<td>required</td>
<td></td>
<td>list of descriptorids, seperated by comma</td>
<td></td>
<tr>
<td>userid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of user, 0 for current user</td>
<td></td>
<tr>
<td>forall</td>
<td>bool</td>
<td>null</td>
<td>required</td>
<td></td>
<td>for all users = true, for one user = false</td>
<td></td>
<tr>
<td>visible</td>
<td>bool</td>
<td>null</td>
<td>required</td>
<td></td>
<td>visibility for descriptor in current context</td>
<td></td>
</table>
Returns:<pre>{
    "success": "bool null ('status of success, either true (1) or false (0)')"
}</pre>
<h2>diggrplus_set_example_visibility</h2>
<div>set visibility for example</div>
<div>type: write</div>
Params: <table>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of course</td>
<td></td>
<tr>
<td>ids</td>
<td>text</td>
<td>null</td>
<td>required</td>
<td></td>
<td>list of exampleids, seperated by comma</td>
<td></td>
<tr>
<td>userid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of user, 0 for current user</td>
<td></td>
<tr>
<td>forall</td>
<td>bool</td>
<td>null</td>
<td>required</td>
<td></td>
<td>for all users = true, for one user = false</td>
<td></td>
<tr>
<td>visible</td>
<td>bool</td>
<td>null</td>
<td>required</td>
<td></td>
<td>visibility for example in current context</td>
<td></td>
</table>
Returns:<pre>{
    "success": "bool null ('status of success, either true (1) or false (0)')"
}</pre>
<h2>diggrplus_set_topic_visibility</h2>
<div>set visibility for topic</div>
<div>type: write</div>
Params: <table>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of course</td>
<td></td>
<tr>
<td>ids</td>
<td>text</td>
<td>null</td>
<td>required</td>
<td></td>
<td>list of topicids, seperated by comma</td>
<td></td>
<tr>
<td>userid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of user, 0 for current user</td>
<td></td>
<tr>
<td>forall</td>
<td>bool</td>
<td>null</td>
<td>required</td>
<td></td>
<td>for all users = true, for one user = false</td>
<td></td>
<tr>
<td>visible</td>
<td>bool</td>
<td>null</td>
<td>required</td>
<td></td>
<td>visibility for topic in current context</td>
<td></td>
<tr>
<td>groupid</td>
<td>int</td>
<td>null</td>
<td>optional</td>
<td>default: int(-1)
</td>
<td>id of group</td>
<td></td>
</table>
Returns:<pre>{
    "success": "bool null ('status of success, either true (1) or false (0)')"
}</pre>
<h2>dakora_create_cross_subject</h2>
<div>create new crosssubject</div>
<div>type: write</div>
Params: <table>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of course</td>
<td></td>
<tr>
<td>title</td>
<td>text</td>
<td>null</td>
<td>required</td>
<td></td>
<td>title of crosssubject</td>
<td></td>
<tr>
<td>description</td>
<td>text</td>
<td>null</td>
<td>required</td>
<td></td>
<td>description of crosssubject</td>
<td></td>
<tr>
<td>subjectid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of subject crosssubject is assigned to</td>
<td></td>
<tr>
<td>draftid</td>
<td>int</td>
<td>null</td>
<td>optional</td>
<td>default: int(0)
</td>
<td>id of draft</td>
<td></td>
<tr>
<td>groupcategory</td>
<td>text</td>
<td>null</td>
<td>optional</td>
<td>default: string(0) ""
</td>
<td>name of groupcategory</td>
<td></td>
</table>
Returns:<pre>{
    "success": "bool null ('status of success, either true (1) or false (0)')"
}</pre>
<h2>dakora_delete_cross_subject</h2>
<div>delete cross subject</div>
<div>type: write</div>
Params: <table>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of course</td>
<td></td>
<tr>
<td>crosssubjid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of crosssubject</td>
<td></td>
</table>
Returns:<pre>{
    "success": "bool null ('status of success, either true (1) or false (0)')"
}</pre>
<h2>dakora_edit_cross_subject</h2>
<div>edit existing crosssubject</div>
<div>type: write</div>
Params: <table>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of course</td>
<td></td>
<tr>
<td>crosssubjid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of crosssubject</td>
<td></td>
<tr>
<td>title</td>
<td>text</td>
<td>null</td>
<td>required</td>
<td></td>
<td>title of crosssubject</td>
<td></td>
<tr>
<td>description</td>
<td>text</td>
<td>null</td>
<td>required</td>
<td></td>
<td>description of crosssubject</td>
<td></td>
<tr>
<td>subjectid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of subject crosssubject is assigned to</td>
<td></td>
<tr>
<td>groupcategory</td>
<td>text</td>
<td>null</td>
<td>optional</td>
<td>default: string(0) ""
</td>
<td>name of groupcategory</td>
<td></td>
</table>
Returns:<pre>{
    "success": "bool null ('status of success, either true (1) or false (0)')"
}</pre>
<h2>dakora_get_cross_subject_drafts</h2>
<div>get available drafts</div>
<div>type: read</div>
Params: <table>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of course</td>
<td></td>
</table>
Returns:<pre>[
    {
        "id": "int null ('id of crosssubjet draft')",
        "title": "text null ('title of draft')",
        "description": "text null ('description of draft')"
    },
    "..."
]</pre>
<h2>dakora_get_subjects</h2>
<div>get subjects</div>
<div>type: read</div>
Params: <table>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of course</td>
<td></td>
</table>
Returns:<pre>[
    {
        "id": "int null ('id of subject')",
        "title": "text null ('title of subject')"
    },
    "..."
]</pre>
<h2>dakora_get_students_for_cross_subject</h2>
<div>get_students_for_crosssubject</div>
<div>type: read</div>
Params: <table>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of course</td>
<td></td>
<tr>
<td>crosssubjid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of crossssubj</td>
<td></td>
</table>
Returns:<pre>{
    "students": [
        {
            "id": "int null ('id of student')",
            "firstname": "text null ('firstname of student')",
            "lastname": "text null ('lastname of student')",
            "visible": "int null ('visibility of crosssubject to student')"
        },
        "..."
    ],
    "visible_forall": "int null ('visibility of crosssubject to all students')"
}</pre>
<h2>dakora_set_cross_subject_student</h2>
<div>set visibility for crosssubject and student</div>
<div>type: write</div>
Params: <table>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of course</td>
<td></td>
<tr>
<td>crosssubjid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of crosssubject</td>
<td></td>
<tr>
<td>userid</td>
<td>text</td>
<td>null</td>
<td>required</td>
<td></td>
<td>title of crosssubject</td>
<td></td>
<tr>
<td>forall</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>0 or 1</td>
<td></td>
<tr>
<td>value</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>value 0 or 1</td>
<td></td>
</table>
Returns:<pre>{
    "success": "bool null ('status of success, either true (1) or false (0)')"
}</pre>
<h2>dakora_set_cross_subject_descriptor</h2>
<div>set descriptor crosssubject association</div>
<div>type: write</div>
Params: <table>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of course</td>
<td></td>
<tr>
<td>crosssubjid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of crosssubject</td>
<td></td>
<tr>
<td>descriptorid</td>
<td>text</td>
<td>null</td>
<td>required</td>
<td></td>
<td>title of crosssubject</td>
<td></td>
<tr>
<td>value</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>value 0 or 1</td>
<td></td>
</table>
Returns:<pre>{
    "success": "bool null ('status of success, either true (1) or false (0)')"
}</pre>
<h2>dakora_dismiss_oldgrading_warning</h2>
<div>set descriptor crosssubject association</div>
<div>type: write</div>
Params: <table>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of course</td>
<td></td>
<tr>
<td>descriptorid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of descriptor</td>
<td></td>
<tr>
<td>studentid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of student</td>
<td></td>
</table>
Returns:<pre>{
    "success": "bool null ('status of success, either true (1) or false (0)')"
}</pre>
<h2>dakora_send_message</h2>
<div>send message</div>
<div>type: write</div>
Params: <table>
<tr>
<td>messagetext</td>
<td>text</td>
<td>null</td>
<td>required</td>
<td></td>
<td>text of message</td>
<td></td>
<tr>
<td>userfrom</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of user that sends the message</td>
<td></td>
<tr>
<td>userto</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of user message is sent to</td>
<td></td>
</table>
Returns:<pre>{
    "success": "bool null ('status')"
}</pre>
<h2>block_exacomp_update_descriptor_category</h2>
<div>update an descriptor category</div>
<div>type: write</div>
Params: <table>
<tr>
<td>descriptorid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of descriptor</td>
<td></td>
<tr>
<td>categories</td>
<td>text</td>
<td>null</td>
<td>optional</td>
<td>default: string(0) ""
</td>
<td>list of categories</td>
<td></td>
<tr>
<td>newcategory</td>
<td>raw</td>
<td>null</td>
<td>optional</td>
<td>default: string(0) ""
</td>
<td>new category title</td>
<td></td>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>optional</td>
<td>default: int(0)
</td>
<td>courseid</td>
<td></td>
</table>
Returns:<pre>{
    "success": "bool null ('true if successful')",
    "newCategory": {
        "id": "int null ('id of new category')",
        "title": "text null ('title of new category')",
        "source": "int null ('cource of new category')"
    }
}</pre>
<h2>block_exacomp_get_url_preview</h2>
<div>gets title description and image of website</div>
<div>type: read</div>
Params: <table>
<tr>
<td>url</td>
<td>text</td>
<td>null</td>
<td>required</td>
<td></td>
<td>url to fetch preview</td>
<td></td>
</table>
Returns:<pre>{
    "title": "text null ('true if successful')",
    "description": "text null ('true if successful')",
    "imageurl": "text null ('true if successful')"
}</pre>
<h2>dakora_competencegrid_overview</h2>
<div>view competence overview</div>
<div>type: read</div>
Params: <table>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of course</td>
<td></td>
<tr>
<td>userid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of user, if 0 current user</td>
<td></td>
<tr>
<td>subjectid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>subject id</td>
<td></td>
<tr>
<td>forall</td>
<td>int</td>
<td>null</td>
<td>optional</td>
<td>default: int(0)
</td>
<td>for all?</td>
<td></td>
</table>
Returns:<pre>{
    "overview": "raw null ('result html')"
}</pre>
<h2>dakora_delete_custom_example</h2>
<div>delete example</div>
<div>type: write</div>
Params: <table>
<tr>
<td>exampleid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of example</td>
<td></td>
</table>
Returns:<pre>{
    "success": "bool null ('true if successful')"
}</pre>
<h2>diggrplus_delete_custom_example</h2>
<div>delete example</div>
<div>type: write</div>
Params: <table>
<tr>
<td>exampleid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>id of example</td>
<td></td>
</table>
Returns:<pre>{
    "success": "bool null ('true if successful')"
}</pre>
<h2>diggrplus_get_course_schooltype_tree</h2>
<div></div>
<div>type: read</div>
Params: <table>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td></td>
<td></td>
</table>
Returns:<pre>{
    "schooltypes": [
        {
            "id": "int null",
            "title": "text null ('schooltype title')",
            "subjects": [
                {
                    "id": "int null",
                    "title": "text null ('subject title')",
                    "topics": [
                        {
                            "id": "int null",
                            "title": "text null ('topic title')",
                            "active": "bool null"
                        },
                        "..."
                    ]
                },
                "..."
            ]
        },
        "..."
    ]
}</pre>
<h2>diggrplus_set_active_course_topics</h2>
<div></div>
<div>type: write</div>
Params: <table>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td></td>
<td></td>
<tr>
<td>topicids</td>
<td></td>
<td></td>
<td>optional</td>
<td>default: array(0) {
}
</td>
<td>topicid optional so it can be empty</td>
<td><pre>[
    "int null ()",
    "... topicid optional so it can be empty ..."
]</pre></td>
<tr>
<td>hide_new_examples</td>
<td>bool</td>
<td>null</td>
<td>required</td>
<td></td>
<td></td>
<td></td>
</table>
Returns:<pre>{
    "success": "bool null ('status')"
}</pre>
<h2>diggrplus_get_config</h2>
<div></div>
<div>type: read</div>
Params: <table>
</table>
Returns:<pre>{
    "exacompversion": "float null ('exacomp version number in YYYYMMDDXX format')",
    "moodleversion": "float null ('moodle version number in YYYYMMDDXX format')",
    "msteams_import_enabled": "bool null",
    "msteams_azure_app_client_id": "text null"
}</pre>
<h2>diggrplus_annotate_example</h2>
<div>Create an example or update it
create example</div>
<div>type: write</div>
Params: <table>
<tr>
<td>exampleid</td>
<td>int</td>
<td>null</td>
<td>optional</td>
<td>default: int(-1)
</td>
<td>id of the example that is to be updated</td>
<td></td>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>optional</td>
<td>default: int(0)
</td>
<td>courseid</td>
<td></td>
<tr>
<td>annotationtext</td>
<td>text</td>
<td>null</td>
<td>optional</td>
<td>default: string(0) ""
</td>
<td>title of example</td>
<td></td>
</table>
Returns:<pre>{
    "success": "bool null ('status')"
}</pre>
<h2>block_exacomp_diwipass_get_sections_with_materials</h2>
<div>Get urls and resources per section for every course of current user</div>
<div>type: write</div>
Params: <table>
</table>
Returns:<pre>{
    "courses": [
        {
            "name": "text null ('course name')",
            "sections": [
                {
                    "name": "text null ('section name')",
                    "resources": [
                        {
                            "id": "int null ('Module id')",
                            "coursemodule": "int null ('Course module id')",
                            "course": "int null ('Course id')",
                            "name": "raw null ('Page name')",
                            "intro": "raw null ('Summary')",
                            "introformat": "int null ('intro format (1 = HTML, 0 = MOODLE, 2 = PLAIN or 4 = MARKDOWN)')",
                            "introfiles": [
                                {
                                    "filename": "file null ('File name.')",
                                    "filepath": "path null ('File path.')",
                                    "filesize": "int null ('File size.')",
                                    "fileurl": "url null ('Downloadable file url.')",
                                    "timemodified": "int null ('Time modified.')",
                                    "mimetype": "raw null ('File mime type.')",
                                    "isexternalfile": "bool null ('Whether is an external file.')",
                                    "repositorytype": "plugin null ('The repository type for external files.')"
                                },
                                "... Files in the introduction text ..."
                            ],
                            "contentfiles": [
                                {
                                    "filename": "file null ('File name.')",
                                    "filepath": "path null ('File path.')",
                                    "filesize": "int null ('File size.')",
                                    "fileurl": "url null ('Downloadable file url.')",
                                    "timemodified": "int null ('Time modified.')",
                                    "mimetype": "raw null ('File mime type.')",
                                    "isexternalfile": "bool null ('Whether is an external file.')",
                                    "repositorytype": "plugin null ('The repository type for external files.')"
                                },
                                "... Files in the content ..."
                            ]
                        },
                        "..."
                    ],
                    "urls": [
                        {
                            "id": "int null ('Module id')",
                            "coursemodule": "int null ('Course module id')",
                            "course": "int null ('Course id')",
                            "name": "raw null ('URL name')",
                            "intro": "raw null ('Summary')",
                            "introformat": "int null ('intro format (1 = HTML, 0 = MOODLE, 2 = PLAIN or 4 = MARKDOWN)')",
                            "introfiles": [
                                {
                                    "filename": "file null ('File name.')",
                                    "filepath": "path null ('File path.')",
                                    "filesize": "int null ('File size.')",
                                    "fileurl": "url null ('Downloadable file url.')",
                                    "timemodified": "int null ('Time modified.')",
                                    "mimetype": "raw null ('File mime type.')",
                                    "isexternalfile": "bool null ('Whether is an external file.')",
                                    "repositorytype": "plugin null ('The repository type for external files.')"
                                },
                                "... Files in the introduction text ..."
                            ],
                            "externalurl": "raw_trimmed null ('External URL')",
                            "display": "int null ('How to display the url')",
                            "displayoptions": "raw null ('Display options (width, height)')",
                            "parameters": "raw null ('Parameters to append to the URL')",
                            "timemodified": "int null ('Last time the url was modified')",
                            "section": "int null ('Course section id')",
                            "visible": "int null ('Module visibility')",
                            "groupmode": "int null ('Group mode')",
                            "groupingid": "int null ('Grouping id')"
                        },
                        "..."
                    ]
                },
                "..."
            ]
        },
        "..."
    ]
}</pre>
<hr/><h1>Class: block_exacomp_external_setapp</h1><hr/>
<h2>diggrplus_v_edit_course</h2>
<div>Create an example or update it
create example</div>
<div>type: write</div>
Params: <table>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>courseid of course that should be edited</td>
<td></td>
<tr>
<td>fullname</td>
<td>text</td>
<td>null</td>
<td>required</td>
<td></td>
<td>new fullname of course</td>
<td></td>
</table>
Returns:<pre>{
    "success": "bool null ('status')"
}</pre>
<h2>diggrplus_v_create_or_update_student</h2>
<div>Create an example or update it
create example</div>
<div>type: write</div>
Params: <table>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>courseid of course where the student should be added</td>
<td></td>
<tr>
<td>userid</td>
<td>int</td>
<td>null</td>
<td>optional</td>
<td>default: int(0)
</td>
<td>userid of student. 0 if new</td>
<td></td>
<tr>
<td>firstname</td>
<td>text</td>
<td>null</td>
<td>required</td>
<td></td>
<td>firstname of student</td>
<td></td>
<tr>
<td>lastname</td>
<td>text</td>
<td>null</td>
<td>required</td>
<td></td>
<td>lastname of student</td>
<td></td>
<tr>
<td>ausserordentlich</td>
<td>text</td>
<td>null</td>
<td>required</td>
<td></td>
<td></td>
<td></td>
</table>
Returns:<pre>{
    "userid": "int null ('userid of created or updated user')"
}</pre>
<h2>diggrplus_v_delete_student</h2>
<div>Create an example or update it
create example</div>
<div>type: write</div>
Params: <table>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td></td>
<td></td>
<tr>
<td>userid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>userid of student. 0 if new</td>
<td></td>
</table>
Returns:<pre>{
    "success": "bool null ('status')"
}</pre>
<h2>diggrplus_v_get_student_by_id</h2>
<div>Create an example or update it
create example</div>
<div>type: write</div>
Params: <table>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td></td>
<td></td>
<tr>
<td>userid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td>userid of student. 0 if new</td>
<td></td>
</table>
Returns:<pre>{
    "id": "int null ('id')",
    "username": "text null ('username')",
    "firstname": "text null ('firstname')",
    "lastname": "text null ('lastname')",
    "email": "text null ('email')",
    "suspended": "bool null ('suspended')",
    "ausserordentlich": "bool null"
}</pre>
<h2>diggrplus_v_get_student_grading_tree</h2>
<div>Get competence statistic for profile</div>
<div>type: read</div>
Params: <table>
<tr>
<td>userid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td></td>
<td></td>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td></td>
<td></td>
</table>
Returns:<pre>{
    "competencetree": [
        {
            "id": "int null ('id of subject')",
            "title": "text null ('title of subject')",
            "class": "text null ('class number. E.g. \"First Grade\" or \"1\"')",
            "personalisedtext": "text null",
            "assess_with_grades": "bool null",
            "spf": "bool null",
            "is_religion": "bool null",
            "is_pflichtgegenstand": "bool null",
            "is_freigegenstand": "bool null",
            "topics": [
                {
                    "id": "int null ('id of example')",
                    "title": "text null ('title of topic')",
                    "descriptors": [
                        {
                            "id": "int null",
                            "title": "text null",
                            "niveauid": "int null",
                            "niveau_title": "text null",
                            "teacherevaluation": "int null ('teacher evaluation of descriptor')",
                            "personalisedtext": "text null",
                            "sorting": "int null"
                        },
                        "..."
                    ]
                },
                "..."
            ]
        },
        "..."
    ]
}</pre>
<h2>diggrplus_v_save_student_grading</h2>
<div></div>
<div>type: read</div>
Params: <table>
<tr>
<td>userid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td></td>
<td></td>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td></td>
<td></td>
<tr>
<td>subjects</td>
<td></td>
<td></td>
<td>optional</td>
<td></td>
<td></td>
<td><pre>[
    {
        "id": "int null",
        "personalisedtext": "text null",
        "assess_with_grades": "bool null",
        "is_pflichtgegenstand": "bool null ('2')",
        "spf": "bool null"
    },
    "..."
]</pre></td>
<tr>
<td>descriptors</td>
<td></td>
<td></td>
<td>required</td>
<td></td>
<td></td>
<td><pre>[
    {
        "id": "int null",
        "teacherevaluation": "int null",
        "personalisedtext": "text null"
    },
    "..."
]</pre></td>
</table>
Returns:<pre>{
    "success": "bool null ('status')"
}</pre>
<h2>diggrplus_v_print_student_grading_report</h2>
<div></div>
<div>type: read</div>
Params: <table>
<tr>
<td>userid</td>
<td>text</td>
<td>null</td>
<td>required</td>
<td></td>
<td>userid (number) or 'all' to print all users</td>
<td></td>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td></td>
<td></td>
<tr>
<td>output_format</td>
<td>text</td>
<td>null</td>
<td>optional</td>
<td>default: string(3) "pdf"
</td>
<td>pdf or html</td>
<td></td>
<tr>
<td>schoolname</td>
<td>text</td>
<td>null</td>
<td>optional</td>
<td>default: string(0) ""
</td>
<td></td>
<td></td>
<tr>
<td>assessment_period_title</td>
<td>text</td>
<td>null</td>
<td>optional</td>
<td>default: string(0) ""
</td>
<td></td>
<td></td>
</table>
Returns:<pre>{
    "pdf": "file null"
}</pre>
<h2>diggrplus_v_get_course_edulevel_schooltype_tree</h2>
<div></div>
<div>type: read</div>
Params: <table>
<tr>
<td>courseid</td>
<td>int</td>
<td>null</td>
<td>required</td>
<td></td>
<td></td>
<td></td>
</table>
Returns:<pre>{
    "edulevels": [
        {
            "id": "int null",
            "title": "text null ('schooltype title')",
            "schooltypes": [
                {
                    "id": "int null",
                    "title": "text null ('schooltype title')",
                    "subjects": [
                        {
                            "id": "int null",
                            "class": "text null ('class number. E.g. \"First Grade\" or \"1\"')",
                            "title": "text null ('subject title')",
                            "topics": [
                                {
                                    "id": "int null",
                                    "title": "text null ('topic title')",
                                    "active": "bool null"
                                },
                                "..."
                            ]
                        },
                        "..."
                    ]
                },
                "..."
            ]
        },
        "..."
    ]
}</pre>
<h2>block_exacomp_diggrv_create_course</h2>
<div></div>
<div>type: write</div>
Params: <table>
<tr>
<td>coursename</td>
<td>text</td>
<td>null</td>
<td>required</td>
<td></td>
<td></td>
<td></td>
<tr>
<td>schoolcode</td>
<td>text</td>
<td>null</td>
<td>required</td>
<td></td>
<td></td>
<td></td>
</table>
Returns:<pre>{
    "success": "bool null ('status')"
}</pre>
